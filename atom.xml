<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Arvense</title>
  
  
  <link href="/blog/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/blog/"/>
  <updated>2019-06-18T11:27:35.813Z</updated>
  <id>http://yoursite.com/blog/</id>
  
  <author>
    <name>Arvense</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>6-16技术笔记</title>
    <link href="http://yoursite.com/blog/2019/06/18/6-16%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/blog/2019/06/18/6-16技术笔记/</id>
    <published>2019-06-18T11:27:35.000Z</published>
    <updated>2019-06-18T11:27:35.813Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>hexo博客迁移</title>
    <link href="http://yoursite.com/blog/2019/06/18/6-18%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/blog/2019/06/18/6-18技术笔记/</id>
    <published>2019-06-18T11:27:12.000Z</published>
    <updated>2019-06-18T11:33:52.724Z</updated>
    
    <content type="html"><![CDATA[<p>1.保存文件，大概是讲就是历史博客</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">_config.yml</span><br><span class="line"> package.json</span><br><span class="line"> scaffolds/</span><br><span class="line"> source/</span><br><span class="line"> themes/</span><br></pre></td></tr></table></figure><p>2.在新的电脑搭建hexo</p><p>可随便参考网上教程，大概是安装nodejs，安装hexo，生成ssh并添加到github</p><p>3.新建个空目录，执行hexo init，新建一个</p><p>4.把复制的文件拷贝过来</p><p>5.安装各个模块</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">本地测试的时候需要用hexo server</span><br><span class="line">npm i hexo-server</span><br><span class="line">将文章部署到github上的模块</span><br><span class="line">npm install hexo-deployer-git --save</span><br><span class="line">安装RSS插件</span><br><span class="line">npm install hexo-generator-feed --save</span><br><span class="line">添加Sitemap,加速网页收录速度</span><br><span class="line">npm install hexo-generator-sitemap --save</span><br></pre></td></tr></table></figure><p>6.hexo d -g。可观测到成功</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;1.保存文件，大概是讲就是历史博客&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line
      
    
    </summary>
    
      <category term="技术" scheme="http://yoursite.com/blog/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>go类型推断</title>
    <link href="http://yoursite.com/blog/2019/06/11/6-11%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0-1/"/>
    <id>http://yoursite.com/blog/2019/06/11/6-11技术笔记-1/</id>
    <published>2019-06-11T07:54:56.000Z</published>
    <updated>2019-06-11T09:32:28.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="类型推断"><a href="#类型推断" class="headerlink" title="类型推断"></a>类型推断</h1><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fmt.Sprintf(<span class="string">"%T"</span>, v)</span><br></pre></td></tr></table></figure><p>用%T甚至可以直接输出其类型，其实其内部还是用了反射的方法。</p><p>reflect.TypeOf()即可获得类型。</p><p>另一种方法是类型断言，语法是变量名.(类型名)，比如name.(string)。有两个返回值，第一个是目的类型的值，第二个是参数。比如</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test6</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> i <span class="keyword">interface</span>&#123;&#125; = <span class="string">"TT"</span></span><br><span class="line">    j, b := i.(<span class="keyword">int</span>)</span><br><span class="line">    <span class="keyword">if</span> b &#123;</span><br><span class="line">        fmt.Printf(<span class="string">"%T-&gt;%d\n"</span>, j, j)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">"类型不匹配"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>类型推断只能推断一种，想知道什么类型，只能用swith咯，以及关键字type</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    v := <span class="string">"hello world"</span></span><br><span class="line">    fmt.Println(typeof(v))</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">typeof</span><span class="params">(v <span class="keyword">interface</span>&#123;&#125;)</span> <span class="title">string</span></span> &#123;</span><br><span class="line">    <span class="keyword">switch</span> t := v.(<span class="keyword">type</span>) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="keyword">int</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"int"</span></span><br><span class="line">    <span class="keyword">case</span> <span class="keyword">float64</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"float64"</span></span><br><span class="line">    <span class="comment">//... etc</span></span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        _ = t</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"unknown"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;类型推断&quot;&gt;&lt;a href=&quot;#类型推断&quot; class=&quot;headerlink&quot; title=&quot;类型推断&quot;&gt;&lt;/a&gt;类型推断&lt;/h1&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;
      
    
    </summary>
    
      <category term="技术" scheme="http://yoursite.com/blog/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="go" scheme="http://yoursite.com/blog/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>go环境变量，命令，命令行参数</title>
    <link href="http://yoursite.com/blog/2019/06/11/6-11%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/blog/2019/06/11/6-11技术笔记/</id>
    <published>2019-06-11T06:48:36.000Z</published>
    <updated>2019-06-11T07:51:30.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="go环境变量"><a href="#go环境变量" class="headerlink" title="go环境变量"></a>go环境变量</h1><p><strong>GOROOT</strong>：Golang的安装路径。</p><p><strong>GOPATH</strong>：可以理解为工作目录或者工作区，也是平时接触最多的一个变量。它可以是一个目录，可以是多个目录路径，每个目录代表一个工作区。这些目录用于放置Go语言的源码文件（src），以及安装（命令go install）后的归档文件（pkg目录）和可执行文件（bin目录）。</p><p><strong>GOBIN</strong>：GOROOT目录下的可执行文件放置目录，一般指bin。</p><h1 id="go命令"><a href="#go命令" class="headerlink" title="go命令"></a>go命令</h1><p>go env 可以打印出go语言的通用环境信息  </p><p>go build 编译代码，  </p><p>go install 编译并安装代码。二进制会存放于GOBIN环境下</p><p>go get，相当于整合了git，从git将包自动下载到本地并对它进行编译</p><h1 id="flag包和init-函数"><a href="#flag包和init-函数" class="headerlink" title="flag包和init()函数"></a>flag包和init()函数</h1><p>flag包可以获取命令行参数，比如</p><p>var name = flag.String(“name”, “everyone”, “The greeting object.”)</p><p>则可以获取将命令行的name参数，(后两个参数分别为默认值和参数说明)，获取到变量name。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"flag"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> name <span class="keyword">string</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">flag.StringVar(&amp;name, <span class="string">"name"</span>, <span class="string">"everyone"</span>, <span class="string">"The greeting object."</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">flag.Parse()</span><br><span class="line">fmt.Printf(<span class="string">"Hello, %s!\n"</span>, name)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>命令go run demo2.go -name=”Robert”，即可输出Hello，Robert</p><p>init()函数会在每个包完成初始化后自动执行，并且执行优先级比main函数高。所以init()一般来做些初始化动作。</p><p>init函数不需要传入参数，也不会返回任何值。与main相比而言，init没有被声明，因此也不能被引用。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;go环境变量&quot;&gt;&lt;a href=&quot;#go环境变量&quot; class=&quot;headerlink&quot; title=&quot;go环境变量&quot;&gt;&lt;/a&gt;go环境变量&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;GOROOT&lt;/strong&gt;：Golang的安装路径。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;GO
      
    
    </summary>
    
      <category term="技术" scheme="http://yoursite.com/blog/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="go" scheme="http://yoursite.com/blog/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>算法题目总结</title>
    <link href="http://yoursite.com/blog/2019/05/31/%E7%AE%97%E6%B3%95%E9%A2%98%E7%9B%AE%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/blog/2019/05/31/算法题目总结/</id>
    <published>2019-05-31T03:34:12.000Z</published>
    <updated>2019-05-31T07:41:14.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="单调栈"><a href="#单调栈" class="headerlink" title="单调栈"></a>单调栈</h1><h2 id="42"><a href="#42" class="headerlink" title="42"></a>42</h2><p><img src="https://i.loli.net/2019/05/31/5cf093ccbe91559093.png" alt="5cf093ccbe91559093"></p><p>必须两边高，中间低可以装下水，就可以使用一个单调递减栈，将递减的边界存进去，一旦发现当前的数字大于栈顶元素了，那么就有可能会有能装水的地方产生。此时我们当前的数字是右边界，我们从栈中至少需要有两个数字，才能形成一个坑槽，先取出的那个最小的数字，就是坑槽的最低点，再次取出的数字就是左边界，我们比较左右边界，取其中较小的值为装水的边界，然后此高度减去水槽最低点的高度，乘以左右边界间的距离就是装水量了。由于需要知道左右边界的位置，所以我们虽然维护的是递减栈，但是栈中数字并不是存递减的高度，而是递减的高度的坐标。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">trap</span><span class="params">(<span class="keyword">int</span>[] height)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(height == <span class="keyword">null</span> || height.length == <span class="number">0</span>) </span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> sumArea = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        Stack stack = <span class="keyword">new</span> Stack();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> right = <span class="number">0</span>;right &lt; height.length;right++) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span>(!stack.isEmpty() &amp;&amp; height[stack.peek()] &lt; height[right]) &#123; </span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(stack.size() &gt;= <span class="number">2</span>) &#123;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">int</span> j = stack.pop();</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">int</span> left = stack.peek();</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">int</span> curArea = (Math.min(height[right],height[left]) - height[j]) * (right - left - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">                    sumArea += curArea;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line"></span><br><span class="line">                    stack.pop();</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            stack.push(right);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> sumArea;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="503"><a href="#503" class="headerlink" title="503"></a>503</h2><p>给定一个循环数组（最后一个元素的下一个元素是数组的第一个元素），输出每个元素的下一个更大元素。数字 x 的下一个更大的元素是按数组遍历顺序，这个数字之后的第一个比它更大的数，这意味着你应该循环地搜索它的下一个更大的数。如果不存在，则输出 -1。</p><p>题解在这里[<a href="https://arvenseyz.github.io/blog/2019/04/19/leetcode503-895-687/" target="_blank" rel="noopener">https://arvenseyz.github.io/blog/2019/04/19/leetcode503-895-687/</a>]</p><p>##</p><h1 id="找出右上角没有点的点"><a href="#找出右上角没有点的点" class="headerlink" title="找出右上角没有点的点"></a>找出右上角没有点的点</h1><p><img src="https://i.loli.net/2019/05/31/5cf095ee2e22197645.png" alt="5cf095ee2e22197645"></p><p>把点按X坐标排列，即转化为单调栈问题。单调栈难点在于，入栈的和比较的，不一定同一个。</p><h1 id="单链表排序"><a href="#单链表排序" class="headerlink" title="单链表排序"></a>单链表排序</h1><h2 id="leetcode148"><a href="#leetcode148" class="headerlink" title="leetcode148"></a>leetcode148</h2><p>寻找链表中间节点</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//找到中间点，然后分割</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">getMiddle</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (head == <span class="keyword">null</span>) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> head;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//快慢指针</span></span><br><span class="line"></span><br><span class="line">        ListNode slow, fast;</span><br><span class="line"></span><br><span class="line">        slow = fast = head;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (fast.next != <span class="keyword">null</span> &amp;&amp; fast.next.next != <span class="keyword">null</span>) &#123;</span><br><span class="line"></span><br><span class="line">            slow = slow.next;</span><br><span class="line"></span><br><span class="line">            fast = fast.next.next;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> slow;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>归并排序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//单链表的归并排序</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">merge_sort</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (head == <span class="keyword">null</span> || head.next == <span class="keyword">null</span>) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> head;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//得到链表中间的数</span></span><br><span class="line"></span><br><span class="line">        ListNode middle = getMiddle(head);</span><br><span class="line"></span><br><span class="line">        ListNode sHalf = middle.next;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//拆分链表</span></span><br><span class="line"></span><br><span class="line">        middle.next = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//递归调用</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> merge(merge_sort(head), merge_sort(sHalf));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>合并两个有序链表</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 合并排好序的链表</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">merge</span><span class="params">(ListNode a, ListNode b)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        ListNode dummyHead, curr;</span><br><span class="line"></span><br><span class="line">        dummyHead = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        curr = dummyHead;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (a != <span class="keyword">null</span> &amp;&amp; b != <span class="keyword">null</span>) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (a.val &lt;= b.val) &#123;</span><br><span class="line"></span><br><span class="line">                curr.next = a;</span><br><span class="line"></span><br><span class="line">                a = a.next;</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">                curr.next = b;</span><br><span class="line"></span><br><span class="line">                b = b.next;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            curr = curr.next;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        curr.next = (a == <span class="keyword">null</span>) ? b : a;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> dummyHead.next;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h1 id="大数相加"><a href="#大数相加" class="headerlink" title="大数相加"></a>大数相加</h1><p>剑指offer。模拟竖式计算</p><p>1.大端和小端问题：我们写一个数是从高位写到地位，但是我们计算一个数，却是从低位往高位算。</p><p>2.进位问题，若是最高位进位，最高位只会为1。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">bigAdd</span><span class="params">(String s1, String s2)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> len1 = s1.length();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> len2 = s2.length();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (s1 == <span class="keyword">null</span> || len1 &lt;= <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> s2;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (s2 == <span class="keyword">null</span> || len2 &lt;= <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> s1;</span><br><span class="line"></span><br><span class="line">        StringBuffer sum = <span class="keyword">new</span> StringBuffer();</span><br><span class="line"></span><br><span class="line">        StringBuffer sb1 = <span class="keyword">new</span> StringBuffer(s1).reverse();</span><br><span class="line"></span><br><span class="line">        StringBuffer sb2 = <span class="keyword">new</span> StringBuffer(s2).reverse();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> sublen = Math.abs(len1 - len2);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> len = len1;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (len1 &lt; len2) &#123;</span><br><span class="line"></span><br><span class="line">            len = len2;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; sublen; i++) &#123;</span><br><span class="line"></span><br><span class="line">                sb1.append(<span class="string">'0'</span>);</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (len2 &lt; len1) &#123;</span><br><span class="line"></span><br><span class="line">            len = len1;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; sublen; i++) &#123;</span><br><span class="line"></span><br><span class="line">                sb2.append(<span class="string">'0'</span>);</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> over = <span class="number">0</span>;<span class="comment">// 进位</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">boolean</span> flow = <span class="keyword">false</span>;<span class="comment">// 最高位进位溢出</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= len - <span class="number">1</span>; i++) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> bit = (sb1.charAt(i) - <span class="string">'0'</span>) + (sb2.charAt(i) - <span class="string">'0'</span>) + over;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (bit &gt;= <span class="number">10</span>) &#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (i == len - <span class="number">1</span>) &#123;</span><br><span class="line"></span><br><span class="line">                    flow = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                over = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">                sum.append(bit - <span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">                over = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">                sum.append(bit);</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (flow) &#123;</span><br><span class="line"></span><br><span class="line">            sum.append(over);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> sum.reverse().toString();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h1 id="去除链表中间某节点"><a href="#去除链表中间某节点" class="headerlink" title="去除链表中间某节点"></a>去除链表中间某节点</h1><p>剑指offer</p><p>将要删除结点的下一个结点的数据都复制到要删除结点中，然后再删除下一个结点。</p><p>如果给定的节点是尾节点，这题是不可解的，还是需要头结点引用。</p><p>如果只有一个结点，则要删除的结点就是它</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">deleteNode</span><span class="params">(ListNode head, ListNode tobeDelete)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (head == <span class="keyword">null</span> || tobeDelete == <span class="keyword">null</span> || head.next == <span class="keyword">null</span>) &#123;<span class="comment">//head.next == null 是判断链表只要一个结点，则要删除的结点就是它</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (tobeDelete.next != <span class="keyword">null</span>) &#123;<span class="comment">// 要删除的结点不是尾结点</span></span><br><span class="line"></span><br><span class="line">            tobeDelete.val = tobeDelete.next.val;</span><br><span class="line"></span><br><span class="line">            tobeDelete.next = tobeDelete.next.next;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;<span class="comment">// 要删除的结点是尾结点，只能从头找，找到他的前驱结点</span></span><br><span class="line"></span><br><span class="line">            ListNode cur = head;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (cur.next != tobeDelete) &#123;</span><br><span class="line"></span><br><span class="line">                cur = cur.next;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            cur.next = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="岛屿的数量"><a href="#岛屿的数量" class="headerlink" title="岛屿的数量"></a>岛屿的数量</h1><p>给定 ‘1’（陆地）和’0’（水）的二维网格图，计算岛屿的数量。一个岛被水包围，并且通过水平或垂直连接相邻的陆地而形成。你可以假设网格的四个边均被水包围。</p><p><strong><em>示例 :</em></strong></p><p>11000 </p><p>11000 </p><p>00100 </p><p>00011</p><p>答案: 3</p><p>广度优先搜索，典型做法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">numIslands</span><span class="params">(<span class="keyword">char</span>[][] grid)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> cnt=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i grid.length-<span class="number">1</span> &amp;&amp; y &gt; grid[<span class="number">0</span>].length-<span class="number">1</span> ) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (x &lt; grid.length-<span class="number">1</span> &amp;&amp; grid[x+<span class="number">1</span>][y] == <span class="string">'1'</span>) &#123;<span class="comment">//向下</span></span><br><span class="line"></span><br><span class="line">            search(grid,x+<span class="number">1</span>,y);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (y &lt; grid[<span class="number">0</span>].length-<span class="number">1</span> &amp;&amp; grid[x][y+<span class="number">1</span>] == <span class="string">'1'</span>)&#123;<span class="comment">//向右</span></span><br><span class="line"></span><br><span class="line">            search(grid,x,y+<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (x &gt; <span class="number">0</span> &amp;&amp; grid[x-<span class="number">1</span>][y] == <span class="string">'1'</span> )&#123;<span class="comment">//向上</span></span><br><span class="line"></span><br><span class="line">            search(grid,x-<span class="number">1</span>,y);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (y &gt; <span class="number">0</span> &amp;&amp; grid[x][y-<span class="number">1</span>] == <span class="string">'1'</span>) &#123;<span class="comment">//向左</span></span><br><span class="line"></span><br><span class="line">            search(grid,x,y-<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="并查集"><a href="#并查集" class="headerlink" title="并查集"></a>并查集</h1><p>并查集[<a href="https://blog.csdn.net/liujian20150808/article/details/50848646/" target="_blank" rel="noopener">https://blog.csdn.net/liujian20150808/article/details/50848646</a>]</p><p>硬币找零问题之动态规划[<a href="https://www.cnblogs.com/gaorong/p/6562021.html" target="_blank" rel="noopener">https://www.cnblogs.com/gaorong/p/6562021.html</a>]，对应其中题目二变体。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;单调栈&quot;&gt;&lt;a href=&quot;#单调栈&quot; class=&quot;headerlink&quot; title=&quot;单调栈&quot;&gt;&lt;/a&gt;单调栈&lt;/h1&gt;&lt;h2 id=&quot;42&quot;&gt;&lt;a href=&quot;#42&quot; class=&quot;headerlink&quot; title=&quot;42&quot;&gt;&lt;/a&gt;42&lt;/h2&gt;&lt;p
      
    
    </summary>
    
      <category term="leetcode" scheme="http://yoursite.com/blog/categories/leetcode/"/>
    
    
      <category term="动态规划" scheme="http://yoursite.com/blog/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>Go反射</title>
    <link href="http://yoursite.com/blog/2019/05/29/5-29%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/blog/2019/05/29/5-29技术笔记/</id>
    <published>2019-05-29T09:37:22.000Z</published>
    <updated>2019-05-30T03:53:30.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="reflect的TypeOf和ValueOf"><a href="#reflect的TypeOf和ValueOf" class="headerlink" title="reflect的TypeOf和ValueOf"></a>reflect的TypeOf和ValueOf</h1><p>顾名思义，reflect.TypeOf()获取的是其类型，而后者获取的是其值。</p><p>比如这里定义一个结构体，里面有三个成员变量，以及一个方法</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">Id   <span class="keyword">int</span></span><br><span class="line">Name <span class="keyword">string</span></span><br><span class="line">Age  <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(u User)</span> <span class="title">ReflectCallFunc</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"Allen.Wu ReflectCallFunc"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里获取这个结构体的信息</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">DoFiledAndMethod(user)</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">DoFiledAndMethod</span><span class="params">(input <span class="keyword">interface</span>&#123;&#125;)</span></span> &#123;</span><br><span class="line"></span><br><span class="line">getType := reflect.TypeOf(input)</span><br><span class="line">fmt.Println(<span class="string">"get Type is :"</span>, getType.Name())</span><br><span class="line"></span><br><span class="line">getValue := reflect.ValueOf(input)</span><br><span class="line">fmt.Println(<span class="string">"get all Fields is:"</span>, getValue)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取方法字段</span></span><br><span class="line"><span class="comment">// 1. 先获取interface的reflect.Type，然后通过NumField进行遍历</span></span><br><span class="line"><span class="comment">// 2. 再通过reflect.Type的Field获取其Field</span></span><br><span class="line"><span class="comment">// 3. 最后通过Field的Interface()得到对应的value</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; getType.NumField(); i++ &#123;</span><br><span class="line">field := getType.Field(i)</span><br><span class="line">value := getValue.Field(i).Interface()</span><br><span class="line">fmt.Printf(<span class="string">"%s: %v = %v\n"</span>, field.Name, field.Type, value)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取方法</span></span><br><span class="line"><span class="comment">// 1. 先获取interface的reflect.Type，然后通过.NumMethod进行遍历</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; getType.NumMethod(); i++ &#123;</span><br><span class="line">m := getType.Method(i)</span><br><span class="line">fmt.Printf(<span class="string">"%s: %v\n"</span>, m.Name, m.Type)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果应该是</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">get Type is : User</span><br><span class="line"></span><br><span class="line">get all Fields is: &#123;1 Allen.Wu 25&#125;</span><br><span class="line">Id: int = 1</span><br><span class="line">Name: string = Allen.Wu</span><br><span class="line">Age: int = 25</span><br><span class="line">ReflectCallFunc: func(main.User)</span><br></pre></td></tr></table></figure><p>通过运行结果可以得知获取未知类型的interface的具体变量及其类型的步骤为：</p><ol><li>先获取interface的reflect.Type，然后通过NumField进行遍历</li><li>再通过reflect.Type的Field获取其Field</li><li>最后通过Field的Interface()得到对应的value</li></ol><p>通过运行结果可以得知获取未知类型的interface的所属方法（函数）的步骤为：</p><ol><li>先获取interface的reflect.Type，然后通过NumMethod进行遍历</li><li>再分别通过reflect.Type的Method获取对应的真实的方法（函数）</li><li>最后对结果取其Name和Type得知具体的方法名</li><li>也就是说反射可以将“反射类型对象”再重新转换为“接口类型变量”</li><li>struct 或者 struct 的嵌套都是一样的判断处理方式</li></ol><h1 id="设值和方法调用"><a href="#设值和方法调用" class="headerlink" title="设值和方法调用"></a>设值和方法调用</h1><p>反射的核心目的当然不是得知实体的消息，而是设置和方法调用，这样才能实现动态代理啊Rpc啊之类的功能。</p><h2 id="通过reflect-Value设置实际变量的值"><a href="#通过reflect-Value设置实际变量的值" class="headerlink" title="通过reflect.Value设置实际变量的值"></a>通过reflect.Value设置实际变量的值</h2><p>reflect.Value是通过reflect.ValueOf(X)获得的，只有当X是指针的时候，才可以通过reflec.Value修改实际变量X的值，即：要修改反射类型的对象就一定要保证其值是“addressable”的。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"reflect"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> num <span class="keyword">float64</span> = <span class="number">1.2345</span></span><br><span class="line">fmt.Println(<span class="string">"old value of pointer:"</span>, num)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过reflect.ValueOf获取num中的reflect.Value，注意，参数必须是指针才能修改其值</span></span><br><span class="line">pointer := reflect.ValueOf(&amp;num)</span><br><span class="line">newValue := pointer.Elem()</span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">"type of pointer:"</span>, newValue.Type())</span><br><span class="line">fmt.Println(<span class="string">"settability of pointer:"</span>, newValue.CanSet())</span><br><span class="line"></span><br><span class="line"><span class="comment">// 重新赋值</span></span><br><span class="line">newValue.SetFloat(<span class="number">77</span>)</span><br><span class="line">fmt.Println(<span class="string">"new value of pointer:"</span>, num)</span><br><span class="line"></span><br><span class="line"><span class="comment">////////////////////</span></span><br><span class="line"><span class="comment">// 如果reflect.ValueOf的参数不是指针，会如何？</span></span><br><span class="line">pointer = reflect.ValueOf(num)</span><br><span class="line"><span class="comment">//newValue = pointer.Elem() // 如果非指针，这里直接panic，“panic: reflect: call of reflect.Value.Elem on float64 Value”</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">old value of pointer: <span class="number">1.2345</span></span><br><span class="line"><span class="keyword">type</span> of pointer: <span class="keyword">float64</span></span><br><span class="line">settability of pointer: <span class="literal">true</span></span><br><span class="line"><span class="built_in">new</span> value of pointer: <span class="number">77</span></span><br></pre></td></tr></table></figure><h4 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h4><ol><li>需要传入的参数是* float64这个指针，然后可以通过pointer.Elem()去获取所指向的Value，<strong>注意一定要是指针</strong>。</li><li>如果传入的参数不是指针，而是变量，那么<ul><li>通过Elem获取原始值对应的对象则直接panic</li><li>通过CanSet方法查询是否可以设置返回false</li></ul></li><li>newValue.CantSet()表示是否可以重新设置其值，如果输出的是true则可修改，否则不能修改，修改完之后再进行打印发现真的已经修改了。</li><li>reflect.Value.Elem() 表示获取原始值对应的反射对象，只有原始对象才能修改，当前反射对象是不能修改的</li><li>也就是说如果要修改反射类型对象，其值必须是“addressable”【对应的要传入的是指针，同时要通过Elem方法获取原始值对应的反射对象】</li><li>struct 或者 struct 的嵌套都是一样的判断处理方式</li></ol><h2 id="通过reflect-ValueOf来进行方法的调用"><a href="#通过reflect-ValueOf来进行方法的调用" class="headerlink" title="通过reflect.ValueOf来进行方法的调用"></a>通过reflect.ValueOf来进行方法的调用</h2><p>Value对象的Call方法进行方法的反射调用。</p><p>简单来说，通过MethodByName等方法，返回的是注册过的Value，同样，进行方法调用的参数，也是Value的数组。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"reflect"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">Id   <span class="keyword">int</span></span><br><span class="line">Name <span class="keyword">string</span></span><br><span class="line">Age  <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(u User)</span> <span class="title">ReflectCallFuncHasArgs</span><span class="params">(name <span class="keyword">string</span>, age <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"ReflectCallFuncHasArgs name: "</span>, name, <span class="string">", age:"</span>, age, <span class="string">"and origal User.Name:"</span>, u.Name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(u User)</span> <span class="title">ReflectCallFuncNoArgs</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"ReflectCallFuncNoArgs"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如何通过反射来进行方法的调用？</span></span><br><span class="line"><span class="comment">// 本来可以用u.ReflectCallFuncXXX直接调用的，但是如果要通过反射，那么首先要将方法注册，也就是MethodByName，然后通过反射调动mv.Call</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">user := User&#123;<span class="number">1</span>, <span class="string">"Allen.Wu"</span>, <span class="number">25</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. 要通过反射来调用起对应的方法，必须要先通过reflect.ValueOf(interface)来获取到reflect.Value，得到“反射类型对象”后才能做下一步处理</span></span><br><span class="line">getValue := reflect.ValueOf(user)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 一定要指定参数为正确的方法名</span></span><br><span class="line"><span class="comment">// 2. 先看看带有参数的调用方法</span></span><br><span class="line">methodValue := getValue.MethodByName(<span class="string">"ReflectCallFuncHasArgs"</span>)</span><br><span class="line">args := []reflect.Value&#123;reflect.ValueOf(<span class="string">"wudebao"</span>), reflect.ValueOf(<span class="number">30</span>)&#125;</span><br><span class="line">methodValue.Call(args)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 一定要指定参数为正确的方法名</span></span><br><span class="line"><span class="comment">// 3. 再看看无参数的调用方法</span></span><br><span class="line">methodValue = getValue.MethodByName(<span class="string">"ReflectCallFuncNoArgs"</span>)</span><br><span class="line">args = <span class="built_in">make</span>([]reflect.Value, <span class="number">0</span>)</span><br><span class="line">methodValue.Call(args)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">ReflectCallFuncHasArgs name:  wudebao , age: <span class="number">30</span> and origal User.Name: Allen.Wu</span><br><span class="line">ReflectCallFuncNoArgs</span><br></pre></td></tr></table></figure><ol><li><p>要通过反射来调用起对应的方法，必须要先通过reflect.ValueOf(interface)来获取到reflect.Value，得到“反射类型对象”后才能做下一步处理</p></li><li><p>reflect.Value.MethodByName这.MethodByName，需要指定准确真实的方法名字，如果错误将直接panic，MethodByName返回一个函数值对应的reflect.Value方法的名字。</p></li><li><p>[]reflect.Value，这个是最终需要调用的方法的参数，可以没有或者一个或者多个，根据实际参数来定。</p></li><li><p>reflect.Value的 Call 这个方法，这个方法将最终调用真实的方法，参数务必保持一致，如果reflect.Value’Kind不是一个方法，那么将直接panic。</p></li><li><p>本来可以用u.ReflectCallFuncXXX直接调用的，但是如果要通过反射，那么首先要将方法注册，也就是MethodByName，然后通过反射调用methodValue.Call</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;reflect的TypeOf和ValueOf&quot;&gt;&lt;a href=&quot;#reflect的TypeOf和ValueOf&quot; class=&quot;headerlink&quot; title=&quot;reflect的TypeOf和ValueOf&quot;&gt;&lt;/a&gt;reflect的TypeOf和Value
      
    
    </summary>
    
      <category term="技术" scheme="http://yoursite.com/blog/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Go" scheme="http://yoursite.com/blog/tags/Go/"/>
    
  </entry>
  
  <entry>
    <title>在线聊天室</title>
    <link href="http://yoursite.com/blog/2019/05/28/5-28%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/blog/2019/05/28/5-28技术笔记/</id>
    <published>2019-05-28T05:12:27.000Z</published>
    <updated>2019-05-29T02:04:18.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h1><p>第一步是监听端口，使用net包的Listen方法。返回一个Listener，用于接受和关闭连接等。</p><p>第二是，连接的建立，显然每个连接都应该有个channel，然后有个map来保存channel和连接的映射。</p><p>第三是，用一个协程来进行广播，申请三个channel，分别用于传播：进入、离开和通讯的消息。使用轮询的方法，监控三个channel。连接建立即map加一个，离开即删除，发送消息则是遍历map，把消息发给所有的消息channel。</p><p>第四就是，当一个连接建立，往连接的channel里添加来的人，来的人是谁，是listener的Accept()方法返回的conn对象的RemoteAddr()方法得知的；同样，读取客户端conn的所有文本，加入到消息队列里；离开和进入差不多。</p><p>第五，消息channel里的消息来自于连接conn，需要一个协程先把会话channel里的消息写入连接conn。这里我认为应该调用conn.Write(msgbyte)方法，但是fmt.Fprintln()似乎起了相同的效果。</p><p>第六，通过阻塞来同步，由于channel都是无缓冲的，写入操作会阻塞协程，所以需要别的协程来读channel，广播方法没有读取每个连接的channel，所以需要连接自己新申请一个协程来读取，读取后写入conn。</p><p>第七，for    range chan和select操作都是阻塞的，不会循环退出。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"bufio"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"log"</span></span><br><span class="line"><span class="string">"net"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">listener, err := net.Listen(<span class="string">"tcp"</span>, <span class="string">"localhost:8000"</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">go</span> broadcaster()</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">conn, err := listener.Accept()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Print(err)</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">go</span> handleConn(conn)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">handleConn</span><span class="params">(conn net.Conn)</span></span> &#123;</span><br><span class="line">ch := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">string</span>) <span class="comment">// outgoing client messages</span></span><br><span class="line"><span class="keyword">defer</span> conn.Close()</span><br><span class="line"><span class="keyword">go</span> clientWriter(conn, ch)</span><br><span class="line"></span><br><span class="line">who := conn.RemoteAddr().String()</span><br><span class="line">ch &lt;- <span class="string">"You are "</span> + who</span><br><span class="line">messages &lt;- who + <span class="string">" has arrived"</span></span><br><span class="line">entering &lt;- ch</span><br><span class="line"></span><br><span class="line">input := bufio.NewScanner(conn)</span><br><span class="line"><span class="keyword">for</span> input.Scan() &#123;</span><br><span class="line">messages &lt;- who + <span class="string">": "</span> + input.Text()</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// <span class="doctag">NOTE:</span> ignoring potential errors from input.Err()</span></span><br><span class="line"></span><br><span class="line">leaving &lt;- ch</span><br><span class="line">messages &lt;- who + <span class="string">" has left"</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">clientWriter</span><span class="params">(conn net.Conn, ch &lt;-<span class="keyword">chan</span> <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> msg := <span class="keyword">range</span> ch &#123;</span><br><span class="line">fmt.Fprintln(conn, msg) <span class="comment">// <span class="doctag">NOTE:</span> ignoring network errors</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> client <span class="keyword">chan</span>&lt;- <span class="keyword">string</span> <span class="comment">// an outgoing message channel</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">entering = <span class="built_in">make</span>(<span class="keyword">chan</span> client)</span><br><span class="line">leaving  = <span class="built_in">make</span>(<span class="keyword">chan</span> client)</span><br><span class="line">messages = <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">string</span>) <span class="comment">// all incoming client messages</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">broadcaster</span><span class="params">()</span></span> &#123;</span><br><span class="line">clients := <span class="built_in">make</span>(<span class="keyword">map</span>[client]<span class="keyword">bool</span>) <span class="comment">// all connected clients</span></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line"><span class="keyword">case</span> msg := &lt;-messages:</span><br><span class="line"><span class="comment">// Broadcast incoming message to all</span></span><br><span class="line"><span class="comment">// clients' outgoing message channels.</span></span><br><span class="line"><span class="keyword">for</span> cli := <span class="keyword">range</span> clients &#123;</span><br><span class="line">cli &lt;- msg</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> cli := &lt;-entering:</span><br><span class="line">clients[cli] = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> cli := &lt;-leaving:</span><br><span class="line"><span class="built_in">delete</span>(clients, cli)</span><br><span class="line"><span class="built_in">close</span>(cli)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h1><p>客户端相对简单，用net.Dial()，连接到端口。</p><p>主协程把标准输入里的内容赋值到conn，一个新协程，将conn里收到的内容输出到标准输出。</p><p>值得注意的是主协程和输出协程的同步，当手动停止标准输入时，主协程结束，conn关闭，这时输出协程可能还没结束。用一个无缓冲的chan，做阻塞队列即可，主协程读取，读不到会阻塞，直到输出协程结束，输入内容到chan，主协程读到消息，结束，输出协程也结束。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"io"</span></span><br><span class="line"><span class="string">"log"</span></span><br><span class="line"><span class="string">"net"</span></span><br><span class="line"><span class="string">"os"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">conn, err := net.Dial(<span class="string">"tcp"</span>, <span class="string">"localhost:8000"</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line">done := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;)</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">io.Copy(os.Stdout, conn) <span class="comment">// <span class="doctag">NOTE:</span> ignoring errors</span></span><br><span class="line">log.Println(<span class="string">"done"</span>)</span><br><span class="line">done &lt;- <span class="keyword">struct</span>&#123;&#125;&#123;&#125; <span class="comment">// signal the main goroutine</span></span><br><span class="line">&#125;()</span><br><span class="line">mustCopy(conn, os.Stdin)</span><br><span class="line">conn.Close()</span><br><span class="line">&lt;-done <span class="comment">// wait for background goroutine to finish</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">mustCopy</span><span class="params">(dst io.Writer, src io.Reader)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> _, err := io.Copy(dst, src); err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;服务端&quot;&gt;&lt;a href=&quot;#服务端&quot; class=&quot;headerlink&quot; title=&quot;服务端&quot;&gt;&lt;/a&gt;服务端&lt;/h1&gt;&lt;p&gt;第一步是监听端口，使用net包的Listen方法。返回一个Listener，用于接受和关闭连接等。&lt;/p&gt;
&lt;p&gt;第二是，连接的建立
      
    
    </summary>
    
      <category term="技术" scheme="http://yoursite.com/blog/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Go" scheme="http://yoursite.com/blog/tags/Go/"/>
    
  </entry>
  
  <entry>
    <title>并发获取网页内容，web服务器</title>
    <link href="http://yoursite.com/blog/2019/05/27/5-27%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/blog/2019/05/27/5-27技术笔记/</id>
    <published>2019-05-27T06:32:59.000Z</published>
    <updated>2019-05-27T09:14:02.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="并发获取多个网页内容"><a href="#并发获取多个网页内容" class="headerlink" title="并发获取多个网页内容"></a>并发获取多个网页内容</h2><p>首先是http包，使用其函数http.Get()，就可以直接进行http请求，返回体即是请求到的内容的指针。</p><p>其次是ioutil包，其函数ReadAll()，将一个io.Reader对象转化成字符串，而网页内容实体response的属性boby即是一个io.Reader对象。</p><p>最后是通道和协程，使用协程来进行http请求，协程将内容传给主协程，主协程读取输出，这里用一个0容量channel，读写阻塞依次进行。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">start := time.Now()</span><br><span class="line">ch := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">string</span>)</span><br><span class="line"><span class="keyword">for</span> _, url := <span class="keyword">range</span> os.Args[<span class="number">1</span>:] &#123;</span><br><span class="line"><span class="keyword">go</span> fetch(url, ch) <span class="comment">// start a goroutine</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> <span class="keyword">range</span> os.Args[<span class="number">1</span>:] &#123;</span><br><span class="line">fmt.Println(&lt;-ch) <span class="comment">// receive from channel ch</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Printf(<span class="string">"%.2fs elapsed\n"</span>, time.Since(start).Seconds())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">fetch</span><span class="params">(url <span class="keyword">string</span>, ch <span class="keyword">chan</span>&lt;- <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line"><span class="comment">//start := time.Now()</span></span><br><span class="line">resp, err := http.Get(url)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">ch &lt;- fmt.Sprint(err) <span class="comment">// send to channel ch</span></span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">nbytes, err := ioutil.ReadAll(resp.Body)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">ch &lt;- fmt.Sprintf(<span class="string">"while reading %s: %v"</span>, url, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">err = resp.Body.Close() <span class="comment">// don't leak resources</span></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">ch &lt;- fmt.Sprintf(<span class="string">"while reading %s: %v"</span>, url, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//secs := time.Since(start).Seconds()</span></span><br><span class="line">ch &lt;- <span class="keyword">string</span>(nbytes)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="web服务器"><a href="#web服务器" class="headerlink" title="web服务器"></a>web服务器</h1><p>首先是http包的监听端口,http.ListenAndServe()，两个参数填地址和handler</p><p>其次是实现这个handler，让showHandler实现Hanlder的方法ServeHTTP，这里简单打印一下request的头部</p><p>最后是给端口加处理函数http.HandleFunc()，这里用一个简单的计数函数，计数器需要加锁，用sync包里的Mutex，它实现了加解锁方法。</p><p>呈现的效果是，访问localhost:8100，控制台输出请求头部，访问localhost:8100/count，网页显示访问次数。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"net/http"</span></span><br><span class="line"><span class="string">"sync"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> mu sync.Mutex</span><br><span class="line"><span class="keyword">var</span> count <span class="keyword">int</span></span><br><span class="line"><span class="keyword">type</span> showHandler <span class="keyword">string</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"> http.HandleFunc(<span class="string">"/"</span>, handler)</span><br><span class="line"></span><br><span class="line">http.HandleFunc(<span class="string">"/count"</span>, counter)</span><br><span class="line">http.ListenAndServe(<span class="string">"localhost:8100"</span>, <span class="literal">nil</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// handler echoes the Path component of the requested URL.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">handler</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">mu.Lock()</span><br><span class="line">count++</span><br><span class="line">mu.Unlock()</span><br><span class="line">fmt.Fprintf(w, <span class="string">"URL.Path = %q\n"</span>, r.URL.Path)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// counter echoes the number of calls so far.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">counter</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">mu.Lock()</span><br><span class="line">fmt.Fprintf(w, <span class="string">"Count %d\n"</span>, count)</span><br><span class="line">mu.Unlock()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s showHandler)</span> <span class="title">ServeHTTP</span><span class="params">(r http.ResponseWriter,p *http.Request)</span></span>  &#123;</span><br><span class="line"> fmt.Printf(<span class="string">"%s"</span>,p.Header)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;并发获取多个网页内容&quot;&gt;&lt;a href=&quot;#并发获取多个网页内容&quot; class=&quot;headerlink&quot; title=&quot;并发获取多个网页内容&quot;&gt;&lt;/a&gt;并发获取多个网页内容&lt;/h2&gt;&lt;p&gt;首先是http包，使用其函数http.Get()，就可以直接进行http请求
      
    
    </summary>
    
      <category term="技术" scheme="http://yoursite.com/blog/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Go" scheme="http://yoursite.com/blog/tags/Go/"/>
    
  </entry>
  
  <entry>
    <title>函数式编程</title>
    <link href="http://yoursite.com/blog/2019/05/24/5-24%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/blog/2019/05/24/5-24技术笔记/</id>
    <published>2019-05-24T06:14:00.000Z</published>
    <updated>2019-05-24T07:43:32.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一等公民"><a href="#一等公民" class="headerlink" title="一等公民"></a>一等公民</h1><p>“一等公民”意味着函数可以像普通的类型（整型、字符串等）一样进行赋值、作为函数的参数传递、作为函数的返回值等。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> f = <span class="function"><span class="keyword">func</span><span class="params">(<span class="keyword">int</span>)</span></span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">f = <span class="function"><span class="keyword">func</span><span class="params">(i <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">fmt.Println(i)</span><br><span class="line">&#125;</span><br><span class="line">f(<span class="number">2</span>)</span><br><span class="line">f = <span class="function"><span class="keyword">func</span><span class="params">(i <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">fmt.Println(i * i * i)</span><br><span class="line">&#125;</span><br><span class="line">f(<span class="number">2</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">输出:</span></span><br><span class="line"><span class="comment">2</span></span><br><span class="line"><span class="comment">8</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>f是一个函数类型的变量，这样可以随时更改其函数功能。</p><h1 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h1><p>闭包是匿名函数与匿名函数所引用环境的<strong>组合</strong>。匿名函数有动态创建的特性，该特性使得匿名函数不用通过参数传递的方式，就可以直接引用外部的变量。这就类似于常规函数直接使用全局变量一样，个人理解为：匿名函数和它引用的变量以及环境，类似常规函数引用全局变量处于一个包的环境。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">n := <span class="number">0</span></span><br><span class="line">f := <span class="function"><span class="keyword">func</span><span class="params">()</span> <span class="title">int</span></span> &#123;</span><br><span class="line">n += <span class="number">1</span></span><br><span class="line"><span class="keyword">return</span> n</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(f())  <span class="comment">// 别忘记括号，不加括号相当于地址</span></span><br><span class="line">fmt.Println(f())</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">输出：</span></span><br><span class="line"><span class="comment">1</span></span><br><span class="line"><span class="comment">2</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>类似于常规函数持有全局变量，匿名函数f持有main()中的局部变量n，重要的是，同时对n可以有所操作。</p><h1 id="函数返回值"><a href="#函数返回值" class="headerlink" title="函数返回值"></a>函数返回值</h1><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">adder</span><span class="params">()</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    sum := <span class="number">0</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(v <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">        sum += v</span><br><span class="line">        <span class="keyword">return</span> sum</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    a := adder() </span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">        <span class="keyword">var</span> s <span class="keyword">int</span></span><br><span class="line">        s, a = a(i)</span><br><span class="line">        fmt.Printf(<span class="string">"0 + 1 + ... + %d = %d\n"</span>,</span><br><span class="line">            i, s)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>a是函数变量adder()，其中持有匿名内部类闭包，a(i)即调用其闭包。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;一等公民&quot;&gt;&lt;a href=&quot;#一等公民&quot; class=&quot;headerlink&quot; title=&quot;一等公民&quot;&gt;&lt;/a&gt;一等公民&lt;/h1&gt;&lt;p&gt;“一等公民”意味着函数可以像普通的类型（整型、字符串等）一样进行赋值、作为函数的参数传递、作为函数的返回值等。&lt;/p&gt;
&lt;f
      
    
    </summary>
    
      <category term="技术" scheme="http://yoursite.com/blog/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="go" scheme="http://yoursite.com/blog/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>SSL工作原理</title>
    <link href="http://yoursite.com/blog/2019/05/23/5-23%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/blog/2019/05/23/5-23技术笔记/</id>
    <published>2019-05-23T05:50:31.000Z</published>
    <updated>2019-05-23T06:17:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>SSL即HTTPS中的S，即在传输过程中对信息加密，简单来说用非对称加密的方式加密对称加密的密钥。</p><h2 id="加密方式"><a href="#加密方式" class="headerlink" title="加密方式"></a>加密方式</h2><p>信息采用对称加密的方式进行加密，采用对称加密，首先双方应该同时持有密钥。</p><p>保证双方安全的持有同一套密钥的方法是，将客户端将对称密钥，进行非对称加密后，发送给服务器，服务器用私钥进行解密即可。</p><h2 id="消息完整性验证"><a href="#消息完整性验证" class="headerlink" title="消息完整性验证"></a>消息完整性验证</h2><p>对了保证信息在传输过程中没有被篡改，使用MAC算法，即SHA或者MD5，算出消息的MAC值，双方需要核对MAC值。</p><h2 id="保证公钥的真实性"><a href="#保证公钥的真实性" class="headerlink" title="保证公钥的真实性"></a>保证公钥的真实性</h2><p>为了避免别人伪装告诉公钥，采用PKI保证公钥真实性。</p><p>PKI是即数字证书。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;SSL即HTTPS中的S，即在传输过程中对信息加密，简单来说用非对称加密的方式加密对称加密的密钥。&lt;/p&gt;
&lt;h2 id=&quot;加密方式&quot;&gt;&lt;a href=&quot;#加密方式&quot; class=&quot;headerlink&quot; title=&quot;加密方式&quot;&gt;&lt;/a&gt;加密方式&lt;/h2&gt;&lt;p&gt;信息采用对
      
    
    </summary>
    
      <category term="技术" scheme="http://yoursite.com/blog/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="计算机网络" scheme="http://yoursite.com/blog/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>redis内部实现</title>
    <link href="http://yoursite.com/blog/2019/05/20/5-20%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/blog/2019/05/20/5-20技术笔记/</id>
    <published>2019-05-20T07:05:39.000Z</published>
    <updated>2019-05-22T02:00:36.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h1><h3 id="简单可变字符串"><a href="#简单可变字符串" class="headerlink" title="简单可变字符串"></a>简单可变字符串</h3><p>redis内部的字符串其实和ArrayList差不多，用byte[]来存储内容，同时还有长度和容量。</p><h3 id="embstr和raw"><a href="#embstr和raw" class="headerlink" title="embstr和raw"></a>embstr和raw</h3><p>Redis 的字符串有两种存储方式，在长度特别短时，使用 <code>emb</code> 形式存储 (embeded)，当长度超过 44 时，使用 <code>raw</code> 形式存储。</p><p><code>embstr</code> 存储形式是这样一种存储形式，它将 RedisObject 对象头和 SDS 对象连续存在一起，使用 <code>malloc</code> 方法一次分配。而 <code>raw</code> 存储形式不一样，它需要两次 <code>malloc</code>，两个对象头在内存地址上一般是不连续的。</p><p>区分要不要在一起的原因是，内存分配器 jemalloc/tcmalloc 等分配内存大小的单位都是 2、4、8、16、32、64 等等，为了能容纳一个完整的 <code>embstr</code> 对象，<code>jemalloc</code> 最少会分配 32 字节的空间，如果字符串再稍微长一点，那就是 64 字节的空间。如果总体超出了 64 字节，Redis 认为它是一个大字符串，不再使用 <code>emdstr</code> 形式存储，而该用 <code>raw</code> 形式。</p><h1 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h1><p>dict 是 Redis 服务器中出现最为频繁的复合型数据结构，除了 hash 结构的数据会用到字典外，整个 Redis 数据库的所有 key 和 value 也组成了一个全局字典，还有带过期时间的 key 集合也是一个字典。zset 集合中存储 value 和 score 值的映射关系也是通过 dict 结构实现的。</p><h3 id="rehash问题"><a href="#rehash问题" class="headerlink" title="rehash问题"></a>rehash问题</h3><p>redis用链表法存储哈希表，问题在于大字典的扩容是比较耗时间的，需要重新申请新的数组，然后将旧字典所有链表中的元素重新挂接到新的数组下面，这是一个O(n)级别的操作，作为单线程的Redis表示很难承受这样耗时的过程。</p><p>解决方法是同时维护两张哈希表，第二张是大小两倍的空表，渐进式rehash。</p><p>搬迁操作埋伏在当前字典的后续指令中(来自客户端的hset/hdel指令等)，也即是说，每次操作了，就搬这个小桶。同时有定时任务，闲下来也会搬迁。</p><h1 id="压缩列表"><a href="#压缩列表" class="headerlink" title="压缩列表"></a>压缩列表</h1><p>Redis 为了节约内存空间使用，zset 和 hash 容器对象在元素个数较少的时候，采用压缩列表 (ziplist) 进行存储。压缩列表是一块连续的内存空间，元素之间紧挨着存储，没有任何冗余空隙。</p><p>简单地说，就是用数组的空间，来存一个链表。</p><p>然而怎么找到下一个元素了，那就是元素的首部有偏移量字段，通过指针偏移操作。</p><p>实际上ziplist还是个双向链表，因为还有上个元素的偏移量。</p><h3 id="级联更新"><a href="#级联更新" class="headerlink" title="级联更新"></a>级联更新</h3><p>有一个问题，上一个元素长度可长可短，所以用的是类似变长编码的方式，当字符串长度小于 254(0xFE) 时，使用一个字节表示；如果达到或超出 254(0xFE) 那就使用 5 个字节来表示。第一个字节是 0xFE(254)，剩余四个字节表示字符串长度。</p><p>问题在于，如果一个元素长度变了，那么它下个元素储存的上一个元素的长度的长度也会变，那么下个元素的长度也会变，甚至有雪崩的风险。</p><h1 id="快速列表"><a href="#快速列表" class="headerlink" title="快速列表"></a>快速列表</h1><p>考虑到链表的附加空间相对太高，prev 和 next 指针就要占去 16 个字节 (64bit 系统的指针是 8 个字节)，另外每个节点的内存都是单独分配，会加剧内存的碎片化，影响内存管理效率。后续版本对列表数据结构进行了改造，使用 quicklist 代替了 ziplist 和 linkedlist。</p><p>quicklist 是 ziplist 和 linkedlist 的混合体，它将 linkedlist 按段切分，每一段使用 ziplist 来紧凑存储，多个 ziplist 之间使用双向指针串接起来。</p><h1 id="过期键删除策略"><a href="#过期键删除策略" class="headerlink" title="过期键删除策略"></a>过期键删除策略</h1><ol><li><p>定时删除：实际不可用，删除过期键这一行为可能会占用相当一部分CPU 时间，在内存不紧张但是CPU 时间非常紧张的情况下.将CPU 时间用在删除和当前任务无关的过期键上，无疑会对服务器的响应时间和吞吐量造成影响。</p></li><li><p>被动删除，惰性删除策略对CPU 时间来说是最友好的:程序只会在取出键时才对键进行过期检查，这可以保证删除过期键的操作只会在非做不可的情况下进行， 并且删除的目标仅限于当前处理的键，这个策略不会在删除其他无关的过期键上花费任何CPU时间。<br>惰性删除策略的缺点是，它对内存是最不友好的: 如果一个键已经过期，而这个键又仍然保留在数据库中，那么只要这个过期键不被删除，它所占用的内存就不会释放。在使用惰性删除策略时，如果数据库中有非常多的过期键，而这些过期键又恰好没有被访问到的话，那么它们也许永远也不会被删除(除非用户手动执行FLUSHDB),我们甚至可以将这种情况看作是一种内存泄漏一一无用的垃圾数据占用了大量的内存，而服务器却不会自己去释放它们。</p></li><li><p>定期删除，基于概念，每次抽取部分元素，如果过期键少于某个比例，则认为过期键不多，如果多于这个比例，则删除过期的键。</p></li></ol><p>实际上一般是惰性删除和定期删除结合。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;字符串&quot;&gt;&lt;a href=&quot;#字符串&quot; class=&quot;headerlink&quot; title=&quot;字符串&quot;&gt;&lt;/a&gt;字符串&lt;/h1&gt;&lt;h3 id=&quot;简单可变字符串&quot;&gt;&lt;a href=&quot;#简单可变字符串&quot; class=&quot;headerlink&quot; title=&quot;简单可变字符串
      
    
    </summary>
    
      <category term="技术" scheme="http://yoursite.com/blog/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="redis" scheme="http://yoursite.com/blog/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>mysql锁和事务原理</title>
    <link href="http://yoursite.com/blog/2019/05/17/5-17%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/blog/2019/05/17/5-17技术笔记/</id>
    <published>2019-05-17T01:29:29.000Z</published>
    <updated>2019-05-17T06:01:06.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="共享锁与排它锁"><a href="#共享锁与排它锁" class="headerlink" title="共享锁与排它锁"></a>共享锁与排它锁</h1><p>其实前者相当于读锁，后者相当于写锁。而实际上，除非声明，select语句不加锁，而update（包括delect和insert）会加排它锁。意向共享锁和意向排他锁锁定的是表。意向锁是InnoDB自动加的，不需用户干预。</p><h1 id="行锁和表锁"><a href="#行锁和表锁" class="headerlink" title="行锁和表锁"></a>行锁和表锁</h1><p>行锁锁行，表锁锁表。对于Innodb，只有走索引才会行锁，其他都是表锁。</p><p>因为行锁锁的是索引。</p><h1 id="间隙锁和next-key锁"><a href="#间隙锁和next-key锁" class="headerlink" title="间隙锁和next_key锁"></a>间隙锁和next_key锁</h1><p>间隙锁锁附近的区域，以防止幻读，next-key锁其实包含了记录锁和间隙锁，即锁定一个范围，并且锁定记录本身，InnoDB默认加锁方式是next-key 锁。</p><p>间隙锁防止其他事务在间隔中插入数据。</p><p>MySQL在<code>REPEATABLE READ</code>隔离级别实际上就已经解决了<code>幻读</code>问题。就是通过这个实现的。</p><h1 id="MVCC"><a href="#MVCC" class="headerlink" title="MVCC"></a>MVCC</h1><p>mqsql读不加锁，所以很快，为了保证可重复读，是通过MVCC实现的，基于版本的，</p><ul><li><p>每次一个事务对某条聚簇索引记录进行改动时，都会把该事务的<code>事务id</code>赋值给<code>trx_id</code>隐藏列。</p></li><li><p><code>roll_pointer</code>：每次对某条聚簇索引记录进行改动时，都会把旧的版本写入到<code>undo日志</code>中，然后这个隐藏列就相当于一个指针，可以通过它来找到该记录修改前的信息。</p></li></ul><p>这样一条记录和它的历史，成了类似链表连接的多版本。这样读找到自己的版本即可。</p><p>即读取数据时生成一个ReadView。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;共享锁与排它锁&quot;&gt;&lt;a href=&quot;#共享锁与排它锁&quot; class=&quot;headerlink&quot; title=&quot;共享锁与排它锁&quot;&gt;&lt;/a&gt;共享锁与排它锁&lt;/h1&gt;&lt;p&gt;其实前者相当于读锁，后者相当于写锁。而实际上，除非声明，select语句不加锁，而update（包括
      
    
    </summary>
    
      <category term="技术" scheme="http://yoursite.com/blog/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="数据库" scheme="http://yoursite.com/blog/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>RocketMQ</title>
    <link href="http://yoursite.com/blog/2019/05/15/5-15%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/blog/2019/05/15/5-15技术笔记/</id>
    <published>2019-05-15T03:03:24.000Z</published>
    <updated>2019-05-15T08:02:34.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="消费模式"><a href="#消费模式" class="headerlink" title="消费模式"></a>消费模式</h1><p>广播消费指的是：一条消息被多个consumer消费，即使这些consumer属于同一个ConsumerGroup,消息也会被ConsumerGroup中的每个Consumer都消费一次，广播消费中ConsumerGroup概念可以认为在消息划分方面无意义。</p><p>集群消费模式：一个ConsumerGroup中的Consumer实例平均分摊消费消息。例如某个Topic有9条消息，其中一个ConsumerGroup有3个实例（可能是3个进程，或者3台机器），那么每个实例只消费其中部分，消费完的消息不能被其他实例消费。</p><h1 id="顺序消息"><a href="#顺序消息" class="headerlink" title="顺序消息"></a>顺序消息</h1><p>严格的顺序消息的三要素： 消息有序发送、有序存储在一个Queue里面、客户端有序消费<br>可能乱序的情况：</p><ol><li><p>异步发送会导致消息抵达和完成存储在Broker的时间不一致，编号大的消息可能先完成发送</p><p>解决方案：只能采取同步消息的方式按照编号发送消息</p></li><li><p>默认消息的发送是同步的，但是默认是轮询的方式发送到该Topic下的所有Queue里面，顺序发送的消息会存储到不同的Queue里面，会乱序</p><p>解决方案：通过同步消息+ selectMessageQueue实现消息的顺序发送和顺序存储在一个ConsumerQueue里面</p></li><li><p>客户端负载均衡是20s更新一次，ConsumerA 收到一个OrderlyQueue，pull了5条消息后，由于ConsumerA的负载过高，不能及时消费这些消息，消费堆积在内存中。此时重新更新了负载策略，该OrderlyQueue分给了ConsumerB，pull了第6到10条消息，ConsumerB负载低，直接消费编号6到10的消息，而编号1-5的消息还堆积在ConsumerA的内存中</p><p>解决方案：分布式锁+每次OrderlyQueue变更Consumer时必须确保消息全部被消费完了，才可以释放锁。</p></li></ol><h2 id="顺序发送代码"><a href="#顺序发送代码" class="headerlink" title="顺序发送代码"></a>顺序发送代码</h2><p>同步消息 + selectMessageQueue</p><p>使用相同的orderId实现该业务的所有消息发送到一个Queue里面，因为默认RMQ是 同步消息，阻塞的，只有前面的消息发送成功了，后面的消息才可以发送，最终确保，消息按照顺序发送到MQ Server的一个Topic的一个Queue里面，因为参数是0，求余还是0</p><h2 id="顺序消费实现原理"><a href="#顺序消费实现原理" class="headerlink" title="顺序消费实现原理"></a>顺序消费实现原理</h2><p>消费端通过加锁的方式，实现顺序消费：</p><ol><li>当Consumer负载均衡Assign一个OrderlyQueue的时候，首先要给该Queue加分布式锁，加锁成功才会添加到本地的pullRequestQueue里面，否则直接忽略该OrderlyQueue</li><li>当Consumer想要释放该Queue的时候(比如负载均衡重新分配），必须要消费完该Queue所有消息，才可以释放锁，否则20s重试一次</li><li>为了防止Consumer异常宕机未解锁，导致该OrderlyQueue失效，引入了Broker端30s过期，Consumer端20s，定时更新时间戳的方式</li></ol><h1 id="重复消息"><a href="#重复消息" class="headerlink" title="重复消息"></a>重复消息</h1><p>造成消息重复的根本原因是：网络不可达。只要通过网络交换数据，就无法避免这个问题。所以解决这个问题的办法就是绕过这个问题。那么问题就变成了：如果消费端收到两条一样的消息，应该怎样处理？</p><ol><li>消费端处理消息的业务逻辑保持幂等性</li><li>保证每条消息都有唯一编号且保证消息处理成功与去重表的日志同时出现</li></ol><p>第1条很好理解，只要保持幂等性，不管来多少条重复消息，最后处理的结果都一样。第2条原理就是利用一张日志表来记录已经处理成功的消息的ID，如果新到的消息ID已经在日志表中，那么就不再处理这条消息。</p><p>第1条解决方案，很明显应该在消费端实现，不属于消息系统要实现的功能。第2条可以消息系统实现，也可以业务端实现。正常情况下出现重复消息的概率其实很小，如果由消息系统来实现的话，肯定会对消息系统的吞吐量和高可用有影响，所以最好还是由业务端自己处理消息重复的问题，这也是RocketMQ不解决消息重复的问题的原因。</p><p><strong>RocketMQ不保证消息不重复，如果你的业务需要保证严格的不重复消息，需要你自己在业务端去重。</strong></p><h1 id="延时消息"><a href="#延时消息" class="headerlink" title="延时消息"></a>延时消息</h1><p>消息延时是在broker端完成的，broker发现是延时消息，解析其延时级别。</p><p>存储消息时，延迟消息进入 <code>Topic</code> 为 <code>SCHEDULE_TOPIC_XXXX</code> 。</p><p>对 <code>SCHEDULE_TOPIC_XXXX</code> 每条消费队列对应<strong>单独一个</strong>定时任务进行轮询，发送 <strong>到达投递时间【计划消费时间】</strong> 的消息，并且持久化发送进度。</p><h1 id="消费重试"><a href="#消费重试" class="headerlink" title="消费重试"></a>消费重试</h1><p><code>Consumer</code> 将消费失败的消息发回 <code>Broker</code>，进入<strong>延迟消息队列</strong>。即，消费失败的消息，不会立即消费</p><h1 id="事务消息"><a href="#事务消息" class="headerlink" title="事务消息"></a>事务消息</h1><p>通过消息的异步事务，可以保证本地事务和消息发送同时执行成功或失败，从而保证了数据的最终一致性。</p><ul><li>发送prepare消息，该消息对Consumer不可见</li><li>执行本地事务</li><li>若本地事务执行成功，则向MQ提交消息确认发送指令；若本地事务执行失败，则向MQ发送取消指令</li><li>若MQ长时间未收到确认发送或取消发送的指令，则向业务系统询问本地事务状态，并做补偿处理</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;消费模式&quot;&gt;&lt;a href=&quot;#消费模式&quot; class=&quot;headerlink&quot; title=&quot;消费模式&quot;&gt;&lt;/a&gt;消费模式&lt;/h1&gt;&lt;p&gt;广播消费指的是：一条消息被多个consumer消费，即使这些consumer属于同一个ConsumerGroup,消息也会被
      
    
    </summary>
    
      <category term="技术" scheme="http://yoursite.com/blog/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="rocketMQ" scheme="http://yoursite.com/blog/tags/rocketMQ/"/>
    
  </entry>
  
  <entry>
    <title>CMS与G1</title>
    <link href="http://yoursite.com/blog/2019/05/09/5-9%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0-1/"/>
    <id>http://yoursite.com/blog/2019/05/09/5-9技术笔记-1/</id>
    <published>2019-05-09T07:26:02.000Z</published>
    <updated>2019-05-10T01:47:42.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CMS"><a href="#CMS" class="headerlink" title="CMS"></a>CMS</h1><ol><li><p>初试标记，需要stop the world(STP)。找到GCroots对象（图中的1），以及年轻代中，引用到的老年代的对象（图中的2和3）<img src="https://i.loli.net/2019/05/09/5cd3dbbd524ac.png" alt="5cd3dbbd524ac"></p></li><li><p>并发标记：从“初始标记”阶段标记的对象开始找出所有存活的对象;</p><p>因为是并发运行的，在运行期间会发生新生代的对象晋升到老年代、或者是直接在老年代分配对象、或者更新老年代对象的引用关系等等，对于这些对象，都是需要进行重新标记的，否则有些对象就会被遗漏，发生漏标的情况。为了提高重新标记的效率，该阶段会把上述对象所在的Card标识为Dirty，后续只需扫描这些Dirty Card的对象，避免扫描整个老年代； 并发标记阶段只负责将引用发生改变的Card标记为Dirty状态，不负责处理；</p><p><img src="https://i.loli.net/2019/05/09/5cd3e00235ca3.png" alt="5cd3e00235ca3"></p><p>如6本来可以回收的，3就是所说的脏节点，3在并发标记阶段发生了变化，指向了6。</p></li><li><p>预清理阶段</p><p>简单来说，就是为第二步后续工作的，把6也标记为可达节点。</p></li><li><p>重新标记：会导致过程中的第二次STP</p><p>扫描整个堆，此时新生代也可作为GCroots节点。为了避免新生代对象过多，可以先进行一次young gc。</p></li><li><p>并发清理，清理阶段，此时由于线程还在工作，所以可能产生浮动垃圾。</p></li><li><p>并发重置</p></li></ol><h1 id="G1"><a href="#G1" class="headerlink" title="G1"></a>G1</h1><p>cms只能回收老年代，年轻代得用ParNew，G1均可回收。</p><p>年轻代回收很简单，复制回收即可。</p><p>G1区别在于，堆不是物理分区的，是逻辑分区的。即物理分块，不同的块属于不同的区，很合理。</p><p>老年代垃圾清理流程和cms类似，区别在于，并不是每次同时回收所有老年代的块，而是垃圾优先，这就是G1的名字（garbage first）。</p><p>有一个问题在于，对象是互相引用依赖的，对象a在region(块)a，他持有引用的对象不一定也在块a，为了标记，岂不是还得扫描全堆。</p><p>解决方法是remember set。</p><p>这是个反向指针集合，反向的意思是，a引用b，反而把a写在b的集合中。</p><p>进行垃圾回收时，如果Region1有根对象A引用了Region2的对象B，显然对象B是活的，如果没有Rset，就需要扫描整个Region1或者其它Region，才能确定对象B是活跃的，有了Rset可以避免对整个堆进行扫描。</p><p>实现大致靠写内存屏障。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;CMS&quot;&gt;&lt;a href=&quot;#CMS&quot; class=&quot;headerlink&quot; title=&quot;CMS&quot;&gt;&lt;/a&gt;CMS&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;初试标记，需要stop the world(STP)。找到GCroots对象（图中的1），以及年轻代中，引用到的老
      
    
    </summary>
    
      <category term="技术" scheme="http://yoursite.com/blog/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="jvm" scheme="http://yoursite.com/blog/tags/jvm/"/>
    
  </entry>
  
  <entry>
    <title>线程池原理</title>
    <link href="http://yoursite.com/blog/2019/05/09/5-9%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/blog/2019/05/09/5-9技术笔记/</id>
    <published>2019-05-09T03:00:08.000Z</published>
    <updated>2019-05-10T01:47:44.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="线程池原理"><a href="#线程池原理" class="headerlink" title="线程池原理"></a>线程池原理</h1><h2 id="线程池执行过程"><a href="#线程池执行过程" class="headerlink" title="线程池执行过程"></a>线程池执行过程</h2><p><img src="https://i.loli.net/2019/05/10/5cd4d7642b8b5.jpg" alt="5cd4d7642b8b5"></p><h2 id="线程池结构"><a href="#线程池结构" class="headerlink" title="线程池结构"></a>线程池结构</h2><ol><li><p>原子性变量ctl：使用了位运算的方式，前三位存储当前状态，后二十七位存储线程数量，把这两个字段放在一起的原因是：操作时保证原子性。</p></li><li><p>阻塞队列workQueue</p></li><li><p>内部类Worker，继承了AQS，实现了runable。</p></li><li><p>Work的集合，workers。</p></li><li><p>可重入锁及其condition。</p></li></ol><h2 id="Worker"><a href="#Worker" class="headerlink" title="Worker"></a>Worker</h2><p>worker实现了runable，与一般的runable相比，多了很多的状态和控制，最主要是有对线程的引用。线程池使用者传入的runable，先被包装转化成worker，才继续操作。</p><h2 id="执行原理"><a href="#执行原理" class="headerlink" title="执行原理"></a>执行原理</h2><p>线程池常用的方法是excute/submit，两者类似，看下流程。</p><p>第一步当然是拿clt，然后进行执行过程图里的一大堆判断，核心线程数，阻塞队列情况。</p><p>无论是核心线程，阻塞队列，非核心线程，进入的都是addWorker方法，即首先加一个线程。</p><p>其中核心代码有如下两步</p><ol><li>自选CAS尝试增加线程数</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (;;) &#123;</span><br><span class="line">               <span class="keyword">if</span> (compareAndIncrementWorkerCount(c))</span><br><span class="line">                   <span class="keyword">break</span> retry;</span><br><span class="line">               c = ctl.get();  <span class="comment">// Re-read ctl</span></span><br><span class="line">               <span class="keyword">if</span> (runStateOf(c) != rs)</span><br><span class="line">                   <span class="keyword">continue</span> retry;</span><br><span class="line">               <span class="comment">// else CAS failed due to workerCount change; retry inner loop</span></span><br><span class="line">           &#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>建立一个新的Worker，将其置入worker的集合中，Worker的构造函数会从线程工厂新申请一个线程。加锁后启动该线程。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">Worker w = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            w = <span class="keyword">new</span> Worker(firstTask);</span><br><span class="line">            <span class="keyword">final</span> Thread t = w.thread;</span><br><span class="line">            <span class="keyword">if</span> (t != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">final</span> ReentrantLock mainLock = <span class="keyword">this</span>.mainLock;</span><br><span class="line">                mainLock.lock();</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">// Recheck while holding lock.</span></span><br><span class="line">                    <span class="comment">// Back out on ThreadFactory failure or if</span></span><br><span class="line">                    <span class="comment">// shut down before lock acquired.</span></span><br><span class="line">                    <span class="keyword">int</span> rs = runStateOf(ctl.get());</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (rs &lt; SHUTDOWN ||</span><br><span class="line">                        (rs == SHUTDOWN &amp;&amp; firstTask == <span class="keyword">null</span>)) &#123;</span><br><span class="line">                        workers.add(w);</span><br><span class="line">                        <span class="keyword">int</span> s = workers.size();</span><br><span class="line">                        <span class="keyword">if</span> (s &gt; largestPoolSize)</span><br><span class="line">                            largestPoolSize = s;</span><br><span class="line">                        workerAdded = <span class="keyword">true</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    mainLock.unlock();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (workerAdded) &#123;</span><br><span class="line">                    t.start();</span><br><span class="line">                    workerStarted = <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (! workerStarted)</span><br><span class="line">                addWorkerFailed(w);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> workerStarted;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Worker(Runnable firstTask) &#123;</span><br><span class="line">    setState(-<span class="number">1</span>); <span class="comment">// inhibit interrupts until runWorker</span></span><br><span class="line">    <span class="keyword">this</span>.firstTask = firstTask;</span><br><span class="line">    <span class="keyword">this</span>.thread = getThreadFactory().newThread(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>由于Worker实现了runable，而第二步中的线程来自worker，所以其start()方法来自于Worker的重载。其重载函数其实就是先执行当前传入的task，循环从阻塞队列中拿出任务执行。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (task != <span class="keyword">null</span> || (task = getTask()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                w.lock();</span><br><span class="line">                <span class="comment">// If pool is stopping, ensure thread is interrupted;</span></span><br><span class="line">                <span class="comment">// if not, ensure thread is not interrupted.  This</span></span><br><span class="line">                <span class="comment">// requires a recheck in second case to deal with</span></span><br><span class="line">                <span class="comment">// shutdownNow race while clearing interrupt</span></span><br><span class="line">                <span class="keyword">if</span> ((runStateAtLeast(ctl.get(), STOP) ||</span><br><span class="line">                     (Thread.interrupted() &amp;&amp;</span><br><span class="line">                      runStateAtLeast(ctl.get(), STOP))) &amp;&amp;</span><br><span class="line">                    !wt.isInterrupted())</span><br><span class="line">                    wt.interrupt();</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    beforeExecute(wt, task);</span><br><span class="line">                    Throwable thrown = <span class="keyword">null</span>;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        task.run();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (RuntimeException x) &#123;</span><br><span class="line">                        thrown = x; <span class="keyword">throw</span> x;</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (Error x) &#123;</span><br><span class="line">                        thrown = x; <span class="keyword">throw</span> x;</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (Throwable x) &#123;</span><br><span class="line">                        thrown = x; <span class="keyword">throw</span> <span class="keyword">new</span> Error(x);</span><br><span class="line">                    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                        afterExecute(task, thrown);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    task = <span class="keyword">null</span>;</span><br><span class="line">                    w.completedTasks++;</span><br><span class="line">                    w.unlock();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure><h2 id="池化原理"><a href="#池化原理" class="headerlink" title="池化原理"></a>池化原理</h2><p>如何保证核心线程不被回收，其实核心原因很简单，线程从阻塞队列拿线程，用的take()操作，拿不到就被阻塞了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;线程池原理&quot;&gt;&lt;a href=&quot;#线程池原理&quot; class=&quot;headerlink&quot; title=&quot;线程池原理&quot;&gt;&lt;/a&gt;线程池原理&lt;/h1&gt;&lt;h2 id=&quot;线程池执行过程&quot;&gt;&lt;a href=&quot;#线程池执行过程&quot; class=&quot;headerlink&quot; title=
      
    
    </summary>
    
      <category term="技术" scheme="http://yoursite.com/blog/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="多线程" scheme="http://yoursite.com/blog/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Dubbo调用链</title>
    <link href="http://yoursite.com/blog/2019/05/08/5-8%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/blog/2019/05/08/5-8技术笔记/</id>
    <published>2019-05-08T11:12:16.000Z</published>
    <updated>2019-05-17T06:01:16.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Dubbo调用链"><a href="#Dubbo调用链" class="headerlink" title="Dubbo调用链"></a>Dubbo调用链</h1><p>简单来说：读取配置、拼装url、创建Invoker、服务导出、服务注册以及消费者通过动态代理、filter、获取Invoker列表、负载均衡。</p><p>配置可以以各种形式，比如api，注解，XML。而Dubbo服务在Zookeeper中的形式是URL，所以读取配置就是把各种属性，变成URL.</p><p>protocol://username:password@host:port/path?key=value&amp;key=value</p><p>服务端和客户端交互的核心是Invoker。Invoker是由代理工厂生成的，而Exportor要做的第一就是把Invoker注册到zookeeper中，Protocol是协议层，相当于应用层实现。</p><p> 集群容错和负载均衡都是在消费者这边实现的，集群容错而言，就是组装的Invoker参数不一样，对结果的处理不同，负载均衡而言，每次取回多个地址，根据策略选用哪个。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Dubbo调用链&quot;&gt;&lt;a href=&quot;#Dubbo调用链&quot; class=&quot;headerlink&quot; title=&quot;Dubbo调用链&quot;&gt;&lt;/a&gt;Dubbo调用链&lt;/h1&gt;&lt;p&gt;简单来说：读取配置、拼装url、创建Invoker、服务导出、服务注册以及消费者通过动态代理
      
    
    </summary>
    
      <category term="技术" scheme="http://yoursite.com/blog/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="dubbo" scheme="http://yoursite.com/blog/tags/dubbo/"/>
    
  </entry>
  
  <entry>
    <title>threadLocal原理和内存泄漏</title>
    <link href="http://yoursite.com/blog/2019/05/07/5-7%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/blog/2019/05/07/5-7技术笔记/</id>
    <published>2019-05-07T06:47:23.000Z</published>
    <updated>2019-05-20T07:04:18.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="threadLocal原理"><a href="#threadLocal原理" class="headerlink" title="threadLocal原理"></a>threadLocal原理</h1><ol><li><p>Thread类中有一个ThreadLocalMap，就是ThreadLocal的Map。这个Map是自己实现的，其实就是Entry的数组，而Entry是弱引用，键是ThreadLocal，值就是其中存的值。初始容量16，数量到达2/3扩容。</p><p>可以想像到，每个线程对应很多ThreadLocal，把它们都放在这个ThreadLocalMap中，是Thread的成员变量。</p></li><li><p>get()方法先拿到当前线程，然后拿到当前线程的成员变量ThreadLocalMap，再从Map中，通过哈希运算，找到对应的key。</p></li><li><p>set()方法，没有map，先建立map，有map，就放入map中，位置是哈希法，哈希冲突怎么办，找数组中的下一个位置。</p></li></ol><h1 id="threadLocal内存泄漏"><a href="#threadLocal内存泄漏" class="headerlink" title="threadLocal内存泄漏"></a>threadLocal内存泄漏</h1><pre><code>ThreadLocal 本身并不存储值，它只是作为一个 key保存到ThreadLocalMap中，但是这里要注意的是它作为一个key用的是弱引用。 因为没有强引用链，弱引用在GC的时候可能会被回收。这样就会在ThreadLocalMap中存在一些key为null的键值对（Entry）。 因为key变成null了，我们是没法访问这些Entry的，但是这些Entry本身是不会被清除的，为什么呢？因为存在一条强引用链。即线程本身-&gt;ThreadLocalMap-&gt;Entry 也就是说，恰恰我们在使用线程池的时候，线程使用完了是会放回到线程池循环使用的。由于ThreadLocalMap的生命周期和线程一样长，如果没有手动删除对应key就会导致这块内存即不会回收也无法访问，也就是内存泄漏。 其实，ThreadLocalMap的设计中已经考虑到这种情况，也加上了一些防护措施：在ThreadLocal的get(),set(),remove()的时候都会清除线程ThreadLocalMap里所有key为null的value。但是这些举动不能保证内存就一定会回收,因为可能这条线程被放回到线程池里后再也没有使用，或者使用的时候没有调用其get(),set(),remove()方法。</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;threadLocal原理&quot;&gt;&lt;a href=&quot;#threadLocal原理&quot; class=&quot;headerlink&quot; title=&quot;threadLocal原理&quot;&gt;&lt;/a&gt;threadLocal原理&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Thread类中有一个Thread
      
    
    </summary>
    
      <category term="技术" scheme="http://yoursite.com/blog/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="多线程" scheme="http://yoursite.com/blog/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>shardingJDBC</title>
    <link href="http://yoursite.com/blog/2019/05/06/5-6%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/blog/2019/05/06/5-6技术笔记/</id>
    <published>2019-05-06T07:39:01.000Z</published>
    <updated>2019-05-06T09:52:18.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="spring配置"><a href="#spring配置" class="headerlink" title="spring配置"></a>spring配置</h2><p>shardingJDBC托管了数据源，它不影响sql语句，但解析数据源时，换成了正确的数据源。</p><p>所以Spring配置中，sqlSessionFactory和transactionManager的dataSource属性，即数据源，都应该配制成shardingDataSource。</p><h2 id="sharding配置"><a href="#sharding配置" class="headerlink" title="sharding配置"></a>sharding配置</h2><p>首先是定义分库分表策略，属性有策略名称，策略作用于哪一行，策略实现。比如inline策略</p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;sharding:inline-strategy<span class="built_in"> id</span>=<span class="string">"databaseShardingStrategy"</span> sharding-column=<span class="string">"user_id"</span> algorithm-expression=<span class="string">"ceres_$&#123;(user_id.hashCode()&gt;&gt;&gt;5) &amp;amp; 1&#125;"</span>/&gt;</span><br></pre></td></tr></table></figure><p>策略作用于userId，方法是后面写的表达式，取哈希值，位运算。</p><p>再比如standard策略：</p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;sharding:standard-strategy<span class="built_in"> id</span>=<span class="string">"databaseYearShardingStrategy"</span> sharding-column=<span class="string">"create_time"</span> precise-algorithm-class=<span class="string">"com.fengjr.ceres.sharding.strategy.YearDatePreciseShardingAlgorithm"</span> range-algorithm-class =<span class="string">"com.fengjr.ceres.sharding.strategy.YearDateRangeShardingAlgorithm"</span> &gt;&lt;/sharding:standard-strategy&gt;</span><br></pre></td></tr></table></figure><p>策略作用于create_time，方法是YearDatePreciseShardingAlgorithm，并给出其实现的位置。有两个实现类，分别用于定值查询和范围查询。</p><p>然后是指定数据源，数据库，以及其中各个表所采用的策略。</p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;sharding:data-source id="shardingDataSource"&gt;</span><br><span class="line">        &lt;sharding:sharding-rule data-source-names="ceres_0, ceres_1,ceres_2017,ceres_2018,ceres_2019"&gt;</span><br><span class="line">            &lt;sharding:table-rules&gt;</span><br><span class="line">                &lt;!--userId--&gt;</span><br><span class="line">                &lt;sharding:table-rule logic-table="user_balance_detail" actual-data-nodes="ceres_$<span class="xquery">&#123;<span class="number">0</span>..<span class="number">1</span>&#125;</span>.user_balance_detail_$<span class="xquery">&#123;<span class="number">0</span>..<span class="number">15</span>&#125;</span>" database-strategy-ref="databaseShardingStrategy" table-strategy-ref="tableShardingStrategy"/&gt;</span><br><span class="line">                &lt;!--createDate--&gt;</span><br><span class="line">                &lt;sharding:table-rule logic-table="product_info" actual-data-nodes="ceres_$<span class="xquery">&#123;<span class="number">2017</span>..<span class="number">2019</span>&#125;</span>.product_info" database-strategy-ref="databaseYearShardingStrategy"/&gt;</span><br></pre></td></tr></table></figure><p>如上，数据源就是spring中配置的shardingDataSource，其中有5个库，ceres_0, ceres_1,ceres_2017,ceres_2018,ceres_2019。</p><p>首先是指定user_balance_detail的策略，所作用数据源是ceres_${0..1}，这个表达式意味着ceres_0, ceres_1；取数据库的策略是databaseShardingStrategy，而其中表的策略是tableShardingStrategy。</p><p>然后是product_info的策略，类似。</p><h2 id="分库分表策略"><a href="#分库分表策略" class="headerlink" title="分库分表策略"></a>分库分表策略</h2><p>即上文策略的实现类。</p><p>ShardingAlgorithm接口有各种子接口，比如standard的两个，分别实现，即写出doSharding方法。</p><p>这个方法的意思是，从配置的数据库表中，找到需要的一个。</p><p>两个参数分别是数据库表的容器，和逻辑上的表+列名+值。</p><p>比如说</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">doSharding</span><span class="params">(Collection&lt;String&gt; availableTargetNames, PreciseShardingValue&lt;Date&gt; shardingValue)</span> </span>&#123;</span><br><span class="line">        SimpleDateFormat sdfYear = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy"</span>);</span><br><span class="line"></span><br><span class="line">        String year = sdfYear.format(shardingValue.getValue());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (String each : availableTargetNames) &#123;</span><br><span class="line">            <span class="keyword">if</span> (each.endsWith(year)) &#123;</span><br><span class="line">                <span class="keyword">return</span> each;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>由于值是create_time，只需要取它的年份，比如2019，然后找到ceres.2019库，返回它即可。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;spring配置&quot;&gt;&lt;a href=&quot;#spring配置&quot; class=&quot;headerlink&quot; title=&quot;spring配置&quot;&gt;&lt;/a&gt;spring配置&lt;/h2&gt;&lt;p&gt;shardingJDBC托管了数据源，它不影响sql语句，但解析数据源时，换成了正确的数据源
      
    
    </summary>
    
      <category term="技术" scheme="http://yoursite.com/blog/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="数据库" scheme="http://yoursite.com/blog/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>http调用过程</title>
    <link href="http://yoursite.com/blog/2019/05/05/5-5%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/blog/2019/05/05/5-5技术笔记/</id>
    <published>2019-05-05T09:34:21.000Z</published>
    <updated>2019-05-05T10:53:58.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="http调用过程"><a href="#http调用过程" class="headerlink" title="http调用过程"></a>http调用过程</h1><h2 id="DNS解析"><a href="#DNS解析" class="headerlink" title="DNS解析"></a>DNS解析</h2><ol><li><p>依次查找浏览器缓存，操作系统缓存，HOST文件。</p></li><li><p>发起DNS的系统调用，向本地运营商发起DNS解析请求，本地运营商查缓存，如果没有，迭代发起根域，顶级域，域名注册商的解析请求，拿到结果后返回。</p></li></ol><h3 id="与服务器建立连接"><a href="#与服务器建立连接" class="headerlink" title="与服务器建立连接"></a>与服务器建立连接</h3><p>TCP三次握手，建立TCP连接，User-Agent（一般指浏览器）会以一个随机端口（1024&lt;端口&lt;65535）向服务器的WEB程序（常用的有httpd，nginx）等的80端口。</p><p>客户端状态变化：SYN_SEND-&gt;ESTABLISHED;</p><p>服务端状态变化：SYN_RCVD&gt;ESTABLISHED;</p><h3 id="发起HTTP请求"><a href="#发起HTTP请求" class="headerlink" title="发起HTTP请求"></a>发起HTTP请求</h3><p>请求有三部分。</p><ol><li><p>请求行：即方法名，URL，版本号，如GET /books/java.html HTTP/1.1</p></li><li><p>请求头：各种属性，编码方式，数据压缩格式，连接属性等</p></li><li><p>请求体：GET就没有，POST就表单</p></li></ol><h3 id="HTTP响应"><a href="#HTTP响应" class="headerlink" title="HTTP响应"></a>HTTP响应</h3><p>HTTP响应报文主要由状态行、响应头部、空行以及响应数据组成</p><ol><li>状态行包括HTTP协议版本，响应码，响应码解析。如HTTP/1.1 200 OK</li></ol><p>1XX请求已接收，正在处理XX<br>2XX，，请求接受成功，处理完成，成功返回，200=0k<br>3XX，，重定向<br>4XX，，客户端错误，400 有语法错误不能理解，401请求未授权，403拒绝提供服务，404 未找到改地址，对象不存在<br>5XX，，服务器端错误，500服务器发生未知错误，503服务器端当前不能处理</p><ol start="2"><li><p>响应头部，和请求头对应，各种属性，长度，编码，语言等等。</p></li><li><p>空行用来隔开响应头部和数据</p></li><li><p>响应数据</p></li></ol><h2 id="客户端处理HTTP响应"><a href="#客户端处理HTTP响应" class="headerlink" title="客户端处理HTTP响应"></a>客户端处理HTTP响应</h2><p> 浏览器拿到html文件后，就开始解析其中的html代码，遇到js/css/image等静态资源时，就向服务器端去请求下载（会使用多线程下载，每个浏览器的线程数不一样），这个时候就用上keep-alive特性了，建立一次HTTP连接，可以请求多个资源，下载资源的顺序就是按照代码里的顺序，但是由于每个资源大小不一样，而浏览器又多线程请求请求资源</p><h2 id="断开服务器连接"><a href="#断开服务器连接" class="headerlink" title="断开服务器连接"></a>断开服务器连接</h2><p>TCP四次挥手。</p><p>客户端状态变化：FIN_WAIT_1-&gt;FIN_WAIT_2-&gt;TIME_WAIT;</p><p>服务端状态变化：CLOSE_WAIT-&gt;LAST_ACK;</p><p><img src="https://i.loli.net/2019/05/05/5cceb416ad540.jpg" alt="5cceb416ad540"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;http调用过程&quot;&gt;&lt;a href=&quot;#http调用过程&quot; class=&quot;headerlink&quot; title=&quot;http调用过程&quot;&gt;&lt;/a&gt;http调用过程&lt;/h1&gt;&lt;h2 id=&quot;DNS解析&quot;&gt;&lt;a href=&quot;#DNS解析&quot; class=&quot;headerlink
      
    
    </summary>
    
      <category term="技术" scheme="http://yoursite.com/blog/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="计算机网络" scheme="http://yoursite.com/blog/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>加油站问题，最大连续子数组乘积，拓扑排序</title>
    <link href="http://yoursite.com/blog/2019/04/30/leetcode134-152-207/"/>
    <id>http://yoursite.com/blog/2019/04/30/leetcode134-152-207/</id>
    <published>2019-04-30T08:50:35.000Z</published>
    <updated>2019-05-05T07:42:38.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="134"><a href="#134" class="headerlink" title="134"></a>134</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>沿环形路线有N个加油站，其中气体在车站i是量是gas[i]。你有车有无限容量的气罐，从加油站i到下一个加油站站点i+1，要消耗cost[i]的汽油。你开始旅程时，油罐是空的。选择一个起点开始旅游，如果你能在周围环形旅行一次，就返回开始的加油站索引，否则返回-1。 </p><h2 id="解答"><a href="#解答" class="headerlink" title="解答"></a>解答</h2><p>数学基础：如果一个数组的总和非负，那么一定可以找到一个起始位置，从他开始绕数组一圈，累加和一直都是非负的。</p><ol><li>假如从位置i开始，i+1，i+2…，一路开过来一路油箱都没有空。说明什么？说明从i到i+1，i+2，…肯定是正积累。  </li><li>现在突然发现开往位置j时油箱空了。这说明什么？说明从位置i开始没法走完全程。那么，我们要从位置i+1开始重新尝试吗？不需要！为什么？因为前面已经知道，位置i肯定是正积累，那么，如果从位置i+1开始走更加没法走完全程了，因为没有位置i的正积累了。同理，也不用从i+2，i+3，…开始尝试。所以我们可以放心地从位置j+1开始尝试。</li></ol><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">canCompleteCircuit</span><span class="params">(<span class="keyword">int</span>[] gas, <span class="keyword">int</span>[] cost)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> start = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> total = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; gas.length; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> dif = gas[i] - cost[i];</span><br><span class="line">            sum += dif;</span><br><span class="line">            total += dif;</span><br><span class="line">            <span class="keyword">if</span> (sum &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                sum = <span class="number">0</span>;</span><br><span class="line">                start = i + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> total &gt;= <span class="number">0</span> ? start : -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="152"><a href="#152" class="headerlink" title="152"></a>152</h1><h2 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h2><p>最大连续子数组乘积。</p><p><strong>Input:</strong> [2,3,-2,4]<br><strong>Output:</strong> 6<br><strong>Explanation:</strong> [2,3] has the largest product 6.</p><h2 id="解答-1"><a href="#解答-1" class="headerlink" title="解答"></a>解答</h2><p>有道题是最大连续子数组和，是一道很简单的动态规划</p><p>dp[i]=max{dp[i-1]+num[i],num[i]}。</p><p>那么这道题区别在哪呢，区别在于负数，如果前面的乘积是个很小的负数，自己也是负数，就可以乘出很大的结果。</p><p>所以解决方法是，同时DP此时最大和最小值。</p><p>最大值有三种可能：</p><p>（1）：自己；</p><p>（2）：max[i-1]*自己：   两者都为正</p><p>（3）：min[i-1]*自己：    两者都为负</p><p>所以DP记录即可。</p><h2 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxProduct</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n =nums.length;</span><br><span class="line">        <span class="keyword">if</span> (n &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> nums[<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> max = nums[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">int</span> min = nums[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> ans = nums[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">1</span>;i&lt;n;i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> maxc=max;</span><br><span class="line">            max=Math.max(Math.max(max*nums[i],nums[i]),min*nums[i]);</span><br><span class="line">            min=Math.min(Math.min(maxc*nums[i],nums[i]),min*nums[i]);</span><br><span class="line">            ans=Math.max(ans,max);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="207"><a href="#207" class="headerlink" title="207"></a>207</h1><h2 id="题目-2"><a href="#题目-2" class="headerlink" title="题目"></a>题目</h2><p>给出n组依赖关系，问是否有环形依赖。</p><h2 id="解答-2"><a href="#解答-2" class="headerlink" title="解答"></a>解答</h2><p>这个问题就是典型的拓扑排序。</p><p>给出一个图，问是否图中有环。</p><p>首先当然是要把图画出来，这里图的构建使用临界矩阵。</p><p>然后就是拓扑排序的过程，第一步计算入度。</p><p>第二步统计所有入度为0的节点，将它们入栈。</p><p>第三步，删除这些入度为0的节点以及他们出的边，也就是说他们连接到的节点的入度也降低了，所以会产生新的入度为0的节点，将它们入栈。</p><p>第四步，如果所有的节点都出栈了，说明没有环。</p><p>比如说，1-&gt;2-&gt;3-&gt;2。</p><p>2和3形成环，删除1后，2和3的入度都是1，都删不了了。</p><h2 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">canFinish</span><span class="params">(<span class="keyword">int</span> numCourses, <span class="keyword">int</span>[][] prerequisites)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[][] m = <span class="keyword">new</span> <span class="keyword">int</span>[numCourses][numCourses];</span><br><span class="line">        <span class="keyword">int</span>[] in = <span class="keyword">new</span> <span class="keyword">int</span>[numCourses];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;prerequisites.length;i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> now = prerequisites[i][<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">int</span> pre = prerequisites[i][<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span>(m[pre][now]==<span class="number">0</span>)&#123;</span><br><span class="line">                in[now]++;</span><br><span class="line">            &#125;</span><br><span class="line">            m[pre][now]=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> cnt=<span class="number">0</span>;</span><br><span class="line">        Queue&lt;Integer&gt; queue = <span class="keyword">new</span> LinkedList();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; in.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (in[i] == <span class="number">0</span>) &#123;</span><br><span class="line">                queue.offer(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (!queue.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">int</span> course = queue.poll();</span><br><span class="line">            cnt++;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numCourses; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (m[course][i] != <span class="number">0</span>) &#123;</span><br><span class="line">                    in[i]--;</span><br><span class="line">                    <span class="keyword">if</span> (in[i] == <span class="number">0</span>) &#123;</span><br><span class="line">                        queue.offer(i);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cnt == numCourses; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;134&quot;&gt;&lt;a href=&quot;#134&quot; class=&quot;headerlink&quot; title=&quot;134&quot;&gt;&lt;/a&gt;134&lt;/h1&gt;&lt;h2 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h2&gt;&lt;p
      
    
    </summary>
    
      <category term="leetcode" scheme="http://yoursite.com/blog/categories/leetcode/"/>
    
    
      <category term="动态规划" scheme="http://yoursite.com/blog/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
      <category term="拓扑排序" scheme="http://yoursite.com/blog/tags/%E6%8B%93%E6%89%91%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
</feed>
