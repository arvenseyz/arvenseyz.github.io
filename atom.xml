<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Arvense</title>
  
  
  <link href="/blog/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/blog/"/>
  <updated>2019-10-25T03:02:04.342Z</updated>
  <id>http://yoursite.com/blog/</id>
  
  <author>
    <name>Arvense</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>kafka协议设计</title>
    <link href="http://yoursite.com/blog/2019/10/25/10-25%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0-1/"/>
    <id>http://yoursite.com/blog/2019/10/25/10-25技术笔记-1/</id>
    <published>2019-10-25T02:16:09.000Z</published>
    <updated>2019-10-25T03:02:04.342Z</updated>
    
    <content type="html"><![CDATA[<p>kafka有很多种协议类型，但遵循同一种协议模式，在该协议模式下，不同协议类型的请求，请求体可以不同，但请求头是一致的。</p><p><strong>request的请求头由以下四部分组成。</strong></p><p>api_key：即请求类型，PRODUCE、FETCH标示发消息，拉消息等。</p><p>api_version：API版本号。</p><p>correlation_id：本次请求的id，由客户端指定的一个数字来唯一地标识这次请求的id，服务端在处理完请求后也会把同样的coorelation_id写到Response中，这样客户端就能把某个请求和响应对应起来了。</p><p>client_id：客户端id。</p><p><strong>response的请求头只有correlation_id。</strong></p><p>实际上，每次请求除了数据，还有一些其他属性数据，比如客户端acks，请求超时时间，分区编号，事务id等，这些内容是放在请求体中的，<img src="https://i.loli.net/2019/10/25/VkPvDW6XoOwTM4m.png" alt="VkPvDW6XoOwTM4m"></p><p>常见的协议还有response的，拉取消息的，相对没这么常见的还有几十种，其实大体类似，指定一些参数，以及指定topic\:partition\:offset，就可以指定到具体想要的一条消息</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;kafka有很多种协议类型，但遵循同一种协议模式，在该协议模式下，不同协议类型的请求，请求体可以不同，但请求头是一致的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;request的请求头由以下四部分组成。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;api_key：即请求类型，PRODUCE、FE
      
    
    </summary>
    
    
      <category term="消息队列" scheme="http://yoursite.com/blog/tags/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>kafka磁盘存储</title>
    <link href="http://yoursite.com/blog/2019/10/12/10-12%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/blog/2019/10/12/10-12技术笔记/</id>
    <published>2019-10-12T10:21:46.000Z</published>
    <updated>2019-10-12T12:07:19.529Z</updated>
    
    <content type="html"><![CDATA[<h1 id="顺序写"><a href="#顺序写" class="headerlink" title="顺序写"></a>顺序写</h1><p>一个由6块 7200r/min 的 RAID-5 阵列组成的磁盘簇的线性（顺序）写入速度可以达到 600MB/s，而随机写入速度只有 100KB/s，两者性能相差6000倍。操作系统可以针对线性读写做深层次的优化，比如预读（read-ahead，提前将一个比较大的磁盘块读入内存）和后写（write-behind，将很多小的逻辑写操作合并起来组成一个大的物理写操作）技术。</p><p><strong>顺序写盘的速度不仅比随机写盘的速度快，而且也比随机写内存的速度快</strong></p><p>kafka只在文件末尾追加数据，并且不能修改之前的数据，所以是顺序写盘，速度很快。</p><h1 id="页缓存"><a href="#页缓存" class="headerlink" title="页缓存"></a>页缓存</h1><p>页缓存技术基于局部性，相当于内存是磁盘热点数据的备份，要读写时先读写内存。</p><p>linux系统可以设置，当内存脏页比例达到多少时，写回磁盘。</p><p>Kafka 中大量使用了页缓存，这是 Kafka 实现高吞吐的重要因素之一。虽然消息都是先被写入页缓存，然后由操作系统负责具体的刷盘任务的，但在 Kafka 中同样提供了同步刷盘及间断性强制刷盘（fsync）的功能，这些功能可以通过参数来控制。</p><p>显然这是个代价问题，同步刷盘可以提高消息的可靠性，防止由于机器掉电等异常造成处于页缓存而没有及时写入磁盘的消息丢失，但是性能会变低，取决于业务来取舍。</p><h1 id="零拷贝"><a href="#零拷贝" class="headerlink" title="零拷贝"></a>零拷贝</h1><p>考虑这样一种常用的情形：你需要将静态内容（类似图片、文件）展示给用户。这个情形就意味着需要先将静态内容从磁盘中复制出来放到一个内存 buf 中，然后将这个 buf 通过套接字（Socket）传输给用户，进而用户获得静态内容。</p><p>在这个过程中，文件 A 经历了4次复制的过程：</p><ol><li>调用 read() 时，文件 A 中的内容被复制到了内核模式下的 Read Buffer 中。</li><li>CPU 控制将内核模式数据复制到用户模式下。</li><li>调用 write() 时，将用户模式下的内容复制到内核模式下的 Socket Buffer 中。</li><li>将内核模式下的 Socket Buffer 的数据复制到网卡设备中传送</li></ol><p>如果采用了零拷贝技术，那么应用程序可以直接请求内核把磁盘中的数据传输给 Socket。</p><p>零拷贝技术通过 DMA（Direct Memory Access）技术将文件内容复制到内核模式下的 Read Buffer 中。不过没有数据被复制到 Socket Buffer，相反只有包含数据的位置和长度的信息的文件描述符被加到 Socket Buffer 中。DMA 引擎直接将数据从内核模式中传递到网卡设备（协议引擎）。这里数据只经历了2次复制就从磁盘中传送出去了，并且上下文切换也变成了2次。零拷贝是针对内核模式而言的，数据在内核模式下实现了零拷贝。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;顺序写&quot;&gt;&lt;a href=&quot;#顺序写&quot; class=&quot;headerlink&quot; title=&quot;顺序写&quot;&gt;&lt;/a&gt;顺序写&lt;/h1&gt;&lt;p&gt;一个由6块 7200r/min 的 RAID-5 阵列组成的磁盘簇的线性（顺序）写入速度可以达到 600MB/s，而随机写入速度只有
      
    
    </summary>
    
      <category term="技术" scheme="http://yoursite.com/blog/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="消息队列" scheme="http://yoursite.com/blog/tags/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>kafka日志格式与索引</title>
    <link href="http://yoursite.com/blog/2019/10/10/10-10%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/blog/2019/10/10/10-10技术笔记/</id>
    <published>2019-10-10T02:34:23.000Z</published>
    <updated>2019-10-12T10:20:39.745Z</updated>
    
    <content type="html"><![CDATA[<h1 id="日志格式"><a href="#日志格式" class="headerlink" title="日志格式"></a>日志格式</h1><p>Log 和 LogSegment 也不是纯粹物理意义上的概念，Log 在物理上只以文件夹的形式存储，而每个 LogSegment 对应于磁盘上的一个日志文件和两个索引文件，以及可能的其他文件（比如以“.txnindex”为后缀的事务索引文件）。</p><p>为了便于消息的检索，每个 LogSegment 中的日志文件（以“.log”为文件后缀）都有对应的两个索引文件：偏移量索引文件（以“.index”为文件后缀）和时间戳索引文件（以“.timeindex”为文件后缀）。每个 LogSegment 都有一个基准偏移量 baseOffset，用来表示当前 LogSegment 中第一条消息的 offset。偏移量是一个64位的长整型数，日志文件和两个索引文件都是根据基准偏移量（baseOffset）命名的，名称固定为20位数字，没有达到的位数则用0填充。</p><p>消费者提交的位移是保存在 Kafka 内部的主题__consumer_offsets中的，初始情况下这个主题并不存在，当第一次有消费者消费消息时会自动创建这个主题。</p><p><img src="https://i.loli.net/2019/10/10/N7OlAxwmCsgvbMB.png" alt="N7OlAxwmCsgvbMB"></p><ul><li>crc32（4B）：crc32 校验值。校验范围为 magic 至 value 之间。</li><li>magic（1B）：消息格式版本号，此版本的 magic 值为0。</li><li>attributes（1B）：消息的属性。总共占1个字节，低3位表示压缩类型：0表示 NONE、1表示 GZIP、2表示 SNAPPY、3表示 LZ4（LZ4 自 Kafka 0.9.x引入），其余位保留。</li><li>key length（4B）：表示消息的 key 的长度。如果为-1，则表示没有设置 key，即 key = null。</li><li>key：可选，如果没有 key 则无此字段。</li><li>value length（4B）：实际消息体的长度。如果为-1，则表示消息为空。</li><li>value：消息体。可以为空，比如墓碑（tombstone）消息。</li></ul><h1 id="日志索引"><a href="#日志索引" class="headerlink" title="日志索引"></a>日志索引</h1><p>每个日志分段文件对应了两个索引文件，主要用来提高查找消息的效率。偏移量索引文件用来建立消息偏移量（offset）到物理地址之间的映射关系，方便快速定位消息所在的物理文件位置；时间戳索引文件则根据指定的时间戳（timestamp）来查找对应的偏移量信息。</p><p>Kafka 中的索引文件以稀疏索引（sparse index）的方式构造消息的索引，它并不保证每个消息在索引文件中都有对应的索引项。每当写入一定量（由 broker 端参数 log.index.interval.bytes 指定，默认值为4096，即 4KB）的消息时，偏移量索引文件和时间戳索引文件分别增加一个偏移量索引项和时间戳索引项，增大或减小 log.index.interval.bytes 的值，对应地可以增加或缩小索引项的密度。</p><p>稀疏索引通过 MappedByteBuffer 将索引文件映射到内存中，以加快索引的查询速度。偏移量索引文件中的偏移量是单调递增的，查询指定偏移量时，使用二分查找法来快速定位偏移量的位置，如果指定的偏移量不在索引文件中，则会返回小于指定偏移量的最大偏移量。</p><p>时间戳索引类似。</p><p>索引会切分，规则较多，日志大小，偏移量，时间等，容易理解。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;日志格式&quot;&gt;&lt;a href=&quot;#日志格式&quot; class=&quot;headerlink&quot; title=&quot;日志格式&quot;&gt;&lt;/a&gt;日志格式&lt;/h1&gt;&lt;p&gt;Log 和 LogSegment 也不是纯粹物理意义上的概念，Log 在物理上只以文件夹的形式存储，而每个 LogSegme
      
    
    </summary>
    
      <category term="技术" scheme="http://yoursite.com/blog/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="消息队列" scheme="http://yoursite.com/blog/tags/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>kafka序列化、分区器、拦截器</title>
    <link href="http://yoursite.com/blog/2019/09/27/9-27%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0-2/"/>
    <id>http://yoursite.com/blog/2019/09/27/9-27技术笔记-2/</id>
    <published>2019-09-27T10:24:57.000Z</published>
    <updated>2019-09-27T12:15:56.971Z</updated>
    
    <content type="html"><![CDATA[<h1 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h1><p>生产者需要用序列化器（Serializer）把对象转换成字节数组才能通过网络发送给 Kafka。而在对侧，消费者需要用反序列化器（Deserializer）把从 Kafka 中收到的字节数组转换成相应的对象。</p><p><strong>待学习</strong>：公司kafka封装的sarama，是怎么序列化的。</p><h1 id="分区器"><a href="#分区器" class="headerlink" title="分区器"></a>分区器</h1><p>如果消息 ProducerRecord 中指定了 partition 字段，那么就不需要分区器的作用，因为 partition 代表的就是所要发往的分区号。如果消息 ProducerRecord 中没有指定 partition 字段，那么就需要依赖分区器，根据 key 这个字段来计算 partition 的值。分区器的作用就是为消息分配分区。</p><h1 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h1><p>Kafka 一共有两种拦截器：生产者拦截器和消费者拦截器。</p><p>生产者拦截器既可以用来在消息发送前做一些准备工作，比如按照某个规则过滤不符合要求的消息、修改消息的内容等，也可以用来在发送回调逻辑前做一些定制化的需求，比如统计类工作。</p><h1 id="发送方式"><a href="#发送方式" class="headerlink" title="发送方式"></a>发送方式</h1><p>1.发送并忘记 2.同步发送 3.异步发送+回调函数。</p><p>效率大概1:10:15</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;序列化&quot;&gt;&lt;a href=&quot;#序列化&quot; class=&quot;headerlink&quot; title=&quot;序列化&quot;&gt;&lt;/a&gt;序列化&lt;/h1&gt;&lt;p&gt;生产者需要用序列化器（Serializer）把对象转换成字节数组才能通过网络发送给 Kafka。而在对侧，消费者需要用反序列化器（D
      
    
    </summary>
    
      <category term="技术" scheme="http://yoursite.com/blog/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="消息队列" scheme="http://yoursite.com/blog/tags/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>kafka多副本同步机制</title>
    <link href="http://yoursite.com/blog/2019/09/24/9-24%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/blog/2019/09/24/9-24技术笔记/</id>
    <published>2019-09-24T02:36:35.000Z</published>
    <updated>2019-09-27T03:42:28.327Z</updated>
    
    <content type="html"><![CDATA[<h1 id="主题和分区"><a href="#主题和分区" class="headerlink" title="主题和分区"></a>主题和分区</h1><p>kafka发消息是需要指定主题的，也可以手动指定分区，不指定的话，可以指定或许自制分区选择策略，也可以用默认的，即有key则hash，没有key则随机。</p><p>只要如果分区规则设置的合理，那么所有的消息将会被均匀的分布到不同的分区中，这样就实现了负载均衡和水平扩展。另外，多个订阅者可以从一个或者多个分区中同时消费数据，以支撑海量数据处理能力。</p><h1 id="分区和副本"><a href="#分区和副本" class="headerlink" title="分区和副本"></a>分区和副本</h1><p>为了提高可靠性，分区引入了多副本（Replica）机制，通过增加副本数量可以提升容灾能力。但是副本并不提供读写功能，只有备份能力。副本处于不同的 broker 中，当 leader 副本出现故障时，从 follower 副本中重新选举新的 leader 副本对外提供服务。</p><p><img src="https://i.loli.net/2019/09/24/oAb9LGOnCaVFkec.png" alt="oAb9LGOnCaVFkec"></p><p>如图，一个三个分区，每个分区有三个副本，分布在4个broker中。</p><h1 id="消费容灾"><a href="#消费容灾" class="headerlink" title="消费容灾"></a>消费容灾</h1><p>offset 是消息在分区中的唯一标识，Kafka 通过它来保证消息在分区内的顺序性，不过 offset 并不跨越分区，也就是说，Kafka 保证的是分区有序而不是主题有序。Consumer 使用拉（Pull）模式从服务端拉取消息，并且保存消费的具体位置，当消费者宕机后恢复上线时可以根据之前保存的消费位置重新拉取需要的消息进行消费，这样就不会造成消息丢失。</p><h1 id="ISR与高水位"><a href="#ISR与高水位" class="headerlink" title="ISR与高水位"></a>ISR与高水位</h1><p>分区中的所有副本统称为 AR（Assigned Replicas）。所有与 leader 副本保持一定程度同步的副本（包括 leader 副本在内）组成ISR（In-Sync Replicas），ISR 集合是 AR 集合中的一个子集。消息会先发送到 leader 副本，然后 follower 副本才能从 leader 副本中拉取消息进行同步，同步期间内 follower 副本相对于 leader 副本而言会有一定程度的滞后。</p><p>高水位，HW，即ISR中同步最慢的那个，所同步到的位置。</p><p><img src="https://i.loli.net/2019/09/24/inU1oKQAL6WtNv2.png" alt="inU1oKQAL6WtNv2"></p><p>如图，该分区有两个副本，同步进度不同，都在ISR中，则可读到的消息，是0123，因为4还没完全同步。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;主题和分区&quot;&gt;&lt;a href=&quot;#主题和分区&quot; class=&quot;headerlink&quot; title=&quot;主题和分区&quot;&gt;&lt;/a&gt;主题和分区&lt;/h1&gt;&lt;p&gt;kafka发消息是需要指定主题的，也可以手动指定分区，不指定的话，可以指定或许自制分区选择策略，也可以用默认的，即有
      
    
    </summary>
    
      <category term="技术" scheme="http://yoursite.com/blog/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="消息队列" scheme="http://yoursite.com/blog/tags/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>linux性能分析工具</title>
    <link href="http://yoursite.com/blog/2019/09/22/9-22%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/blog/2019/09/22/9-22技术笔记/</id>
    <published>2019-09-22T11:31:32.000Z</published>
    <updated>2019-09-22T12:00:32.504Z</updated>
    
    <content type="html"><![CDATA[<h1 id="vmsta"><a href="#vmsta" class="headerlink" title="vmsta"></a>vmsta</h1><p>可对操作系统的虚拟内存、进程、CPU等的整体情况进行监视。</p><p>一般有两个参数，第一个是采样间隔，第二个是采样次数，可省略第二个参数，会一直执行下去直到手动停止。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">procs -----------memory---------- ---swap-- -----io---- -system-- ------cpu-----</span><br><span class="line"> r  b   swpd   free   buff  cache   si   so    bi    bo   <span class="keyword">in</span>   cs us sy id wa st</span><br><span class="line"> 0  0      0 257172 327980 5486280    0    0     1    13    0    0  1  1 97  1  0</span><br><span class="line"> 0  0      0 278168 327980 5486332    0    0     0    37 1583 3408  1  0 97  2  0</span><br><span class="line"> 0  0      0 266540 327980 5486348    0    0     0    26 1803 3684  1  0 98  0  0</span><br><span class="line"> 0  1      0 266964 327980 5484616    0    0     0    78 1647 4011  1  1 95  3  0</span><br></pre></td></tr></table></figure><p>第一行显示了系统自启动以来的平均值，第二行开始显示现在正在发生的情况，接下来的行会显示每5秒间隔发生了什么，每一列的含义在头部，如下所示：</p><p>▪ procs：r这一列显示了多少进程在等待cpu，b列显示多少进程正在不可中断的休眠（等待IO）。</p><p>▪ memory：swapd列显示了多少块被换出了磁盘（页面交换），剩下的列显示了多少块是空闲的（未被使用），多少块正在被用作缓冲区，以及多少正在被用作操作系统的缓存。</p><p>▪ swap：显示交换活动：每秒有多少块正在被换入（从磁盘）和换出（到磁盘）。</p><p>▪ io：显示了多少块从块设备读取（bi）和写出（bo）,通常反映了硬盘I/O。</p><p>▪ system：显示每秒中断(in)和上下文切换（cs）的数量。</p><p>▪ cpu：显示所有的cpu时间花费在各类操作的百分比，包括执行用户代码（非内核），执行系统代码（内核），空闲以及等待IO。</p><h1 id="ps"><a href="#ps" class="headerlink" title="ps"></a>ps</h1><p> Linux中的ps命令是Process Status的缩写。ps命令用来列出系统中当前运行的那些进程。ps命令列出的是当前那些进程的快照，就是执行ps命令的那个时刻的那些进程，如果想要动态的显示进程信息，就可以使用top命令。</p><p>主要参数-aux 显示所有包含其他使用者的行程</p><h1 id="netstat"><a href="#netstat" class="headerlink" title="netstat"></a>netstat</h1><p>netstat命令用于显示与IP、TCP、UDP和ICMP协议相关的统计数据，一般用于检验本机各端口的网络连接情况。netstat是在内核中访问网络及相关信息的程序，它能提供TCP连接，TCP和UDP监听，进程内存管理的相关报告。</p><p>常用参数：</p><p>-a或–all 显示所有连线中的Socket。</p><p>-n或–numeric 直接使用IP地址，而不通过域名服务器。</p><p>-p或–programs 显示正在使用Socket的程序识别码和程序名称。</p><p>-t或–tcp 显示TCP传输协议的连线状况。</p><p><strong>然而Debian没有预装netstat</strong></p><h1 id="top"><a href="#top" class="headerlink" title="top"></a>top</h1><p>top命令是Linux下常用的性能分析工具，能够实时显示系统中各个进程的资源占用状况，类似于Windows的任务管理器。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">top - 19:57:18 up  2:07,  0 users,  load average: 8.88, 6.55, 6.53</span><br><span class="line">Tasks:   9 total,   1 running,   8 sleeping,   0 stopped,   0 zombie</span><br><span class="line">%Cpu(s):  5.7 us,  0.0 sy,  0.0 ni, 94.3 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st</span><br><span class="line">KiB Mem:   4194304 total,    38392 used,  4155912 free,        0 buffers</span><br><span class="line">KiB Swap:        0 total,        0 used,        0 free.     9920 cached Mem</span><br><span class="line"></span><br><span class="line">    PID USER      PR  NI    VIRT    RES    SHR S  %CPU %MEM     TIME+ COMMAND                                                                                                                                      </span><br><span class="line">     57 root      20   0  893576  32220  16872 S   3.0  0.8   3:21.04 toutiao.ev.wall                                                                                                                              </span><br><span class="line">      1 root      20   0   52868   6928   5432 S   0.0  0.2   0:01.61 systemd                                                                                                                                      </span><br><span class="line">     23 daemon    20   0   19028   1736   1568 S   0.0  0.0   0:00.00 atd                                                                                                                                          </span><br><span class="line">     26 root      20   0   29156   2800   2556 S   0.0  0.1   0:00.01 cron                                                                                                                                         </span><br><span class="line">     29 unscd     20   0   14776   1748   1608 S   0.0  0.0   0:00.26 nscd                                                                                                                                         </span><br><span class="line">     33 root      20   0  172092   2888   2472 S   0.0  0.1   0:00.01 rsyslogd                                                                                                                                     </span><br><span class="line">     50 root      20   0   43796   7552   7108 S   0.0  0.2   0:00.02 systemd-journal                                                                                                                              </span><br><span class="line">  13489 root      20   0   15184   3600   3084 S   0.0  0.1   0:00.04 bash                                                                                                                                         </span><br><span class="line">  19242 root      20   0   16808   2580   2228 R   0.0  0.1   0:00.01 top</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;vmsta&quot;&gt;&lt;a href=&quot;#vmsta&quot; class=&quot;headerlink&quot; title=&quot;vmsta&quot;&gt;&lt;/a&gt;vmsta&lt;/h1&gt;&lt;p&gt;可对操作系统的虚拟内存、进程、CPU等的整体情况进行监视。&lt;/p&gt;
&lt;p&gt;一般有两个参数，第一个是采样间隔，第二个是
      
    
    </summary>
    
      <category term="技术" scheme="http://yoursite.com/blog/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="linux" scheme="http://yoursite.com/blog/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>shellscript数组与函数</title>
    <link href="http://yoursite.com/blog/2019/09/17/9-17%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0-1/"/>
    <id>http://yoursite.com/blog/2019/09/17/9-17技术笔记-1/</id>
    <published>2019-09-17T03:32:57.000Z</published>
    <updated>2019-09-17T08:47:26.253Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><p>Bash Shell 只支持一维数组（不支持多维数组），初始化时不需要定义数组大小，并且从0开始。</p><p>Shell 数组用括号来表示，元素用”空格”符号分割开。即</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">array_name=(value1 ... valuen)</span><br></pre></td></tr></table></figure><p>也可以用下标来定义</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">array_name[0]=value0</span><br><span class="line">array_name[1]=value1</span><br><span class="line">array_name[2]=value2</span><br></pre></td></tr></table></figure><p>和其他类似，@和*表示所有，#表示长度</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">marray[0]=A</span><br><span class="line">marray[1]=B</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"content: <span class="variable">$&#123;marray[@]&#125;</span>"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"lenth: <span class="variable">$&#123;#marray[*]&#125;</span>"</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yangzhuo@n224-019-077:~/file$ ./array.sh</span><br><span class="line">content: A B</span><br><span class="line">lenth: 2</span><br></pre></td></tr></table></figure><h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><p>函数严格定义，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[ <span class="keyword">function</span> ] funname [()]</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    action;</span><br><span class="line"></span><br><span class="line">    [<span class="built_in">return</span> int;]</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而function关键字可以省略，返回值也可以省略，将以最后一条命令运行结果，作为返回值。而函数不用写形式参数，传入参数后，就像bash，直接用@123取参数，就像bash，#*等的意义</p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>$#</td><td>参数个数</td></tr><tr><td>$*</td><td>以一个单字符串显示所有向脚本传递的参数</td></tr><tr><td>$$</td><td>脚本运行的当前进程ID号</td></tr><tr><td>$!</td><td>后台运行的最后一个进程的ID号</td></tr><tr><td>$@</td><td>与$*相同，但是使用时加引号，并在引号中返回每个参数。</td></tr><tr><td>$-</td><td>显示Shell使用的当前选项，与set命令功能相同。</td></tr><tr><td>$?</td><td>显示最后命令的退出状态。0表示没有错误，其他任何值表明有错误。</td></tr></tbody></table><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">func</span></span>()&#123;</span><br><span class="line">        sum=0</span><br><span class="line">        <span class="keyword">for</span> num <span class="keyword">in</span> $*</span><br><span class="line">        <span class="keyword">do</span></span><br><span class="line">                sum=`expr <span class="variable">$sum</span> + <span class="variable">$num</span>`</span><br><span class="line">        <span class="keyword">done</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"sum=<span class="variable">$sum</span>"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func 1 2 3 4 5</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yangzhuo@n224-019-077:~/file$ ./func.sh</span><br><span class="line">sum=15</span><br></pre></td></tr></table></figure><p>如上，expr是运算符，表数字运算.</p><p>直接用加法就是字符串拼接，结果会是”sum=0+1+2+3+4+5”</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;数组&quot;&gt;&lt;a href=&quot;#数组&quot; class=&quot;headerlink&quot; title=&quot;数组&quot;&gt;&lt;/a&gt;数组&lt;/h1&gt;&lt;p&gt;Bash Shell 只支持一维数组（不支持多维数组），初始化时不需要定义数组大小，并且从0开始。&lt;/p&gt;
&lt;p&gt;Shell 数组用括号来表
      
    
    </summary>
    
      <category term="技术" scheme="http://yoursite.com/blog/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="linux" scheme="http://yoursite.com/blog/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>shellscript选择与循环</title>
    <link href="http://yoursite.com/blog/2019/09/10/9-10%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/blog/2019/09/10/9-10技术笔记/</id>
    <published>2019-09-10T07:30:22.000Z</published>
    <updated>2019-09-10T10:42:26.915Z</updated>
    
    <content type="html"><![CDATA[<h2 id="条件命令"><a href="#条件命令" class="headerlink" title="条件命令"></a>条件命令</h2><p>在bash脚本编程中，我们经常做一些条件判断， 我们主要用到了三种，test，单中括号，双中括号。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[ $? –eq 0 ]</span><br><span class="line"></span><br><span class="line">[[ $myvar == “mysql” ]]</span><br><span class="line"></span><br><span class="line">test 1 -eq 0</span><br></pre></td></tr></table></figure><h3 id="test"><a href="#test" class="headerlink" title="test"></a>test</h3><p>test是bash内建命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yangzhuo@n224-019-077:~/file$ <span class="built_in">test</span> 1 -ne 0 &amp;&amp;<span class="built_in">echo</span> ok</span><br><span class="line">ok</span><br></pre></td></tr></table></figure><p>ne是不等于的意思，即1不等于0，就输出ok.</p><p>man test可以看见所有参数用法，摘录一点</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">( EXPRESSION )</span><br><span class="line">       EXPRESSION is true</span><br><span class="line"></span><br><span class="line">! EXPRESSION</span><br><span class="line">       EXPRESSION is false</span><br><span class="line"></span><br><span class="line">EXPRESSION1 -a EXPRESSION2</span><br><span class="line">       both EXPRESSION1 and EXPRESSION2 are true</span><br><span class="line"></span><br><span class="line">EXPRESSION1 -o EXPRESSION2</span><br><span class="line">       either EXPRESSION1 or EXPRESSION2 is true</span><br><span class="line">       </span><br><span class="line">       STRING1 = STRING2</span><br><span class="line">       the strings are equal</span><br><span class="line"></span><br><span class="line">STRING1 != STRING2</span><br><span class="line">       the strings are not equal</span><br><span class="line"></span><br><span class="line">INTEGER1 -eq INTEGER2</span><br><span class="line">       INTEGER1 is equal to INTEGER2</span><br><span class="line"></span><br><span class="line">INTEGER1 -ge INTEGER2</span><br><span class="line">       INTEGER1 is greater than or equal to INTEGER2</span><br><span class="line"></span><br><span class="line">INTEGER1 -gt INTEGER2</span><br><span class="line">       INTEGER1 is greater than INTEGER2</span><br></pre></td></tr></table></figure><h3 id="单中括号"><a href="#单中括号" class="headerlink" title="单中括号"></a>单中括号</h3><p>实际上[ 这个是个内建命令，可以执行which [查看。</p><p>这样就可以理解奇怪的规定。即然是命令，那么命令与后面的参数就得用空格隔开，使用[时后面需要有一个空格的原因。所以[1=2]这样的写法将会报错。单中括号与test命令是等价的。</p><p>这里有一个陷阱，既然 <code>都是以参数的形式传递给</code>test` 命令的， 那么如果参数解析的结果是空或者带空格，那么就会因为缺少参数或者参数数量不丢而崩掉。</p><p>所以最好参数用双引号包起来。</p><h3 id="双中括号"><a href="#双中括号" class="headerlink" title="双中括号"></a>双中括号</h3><p>双中括号不是命令，而是shell关键字。因为不是命令，因此不受制与 Shell 的 <strong>参数展开</strong>，比如 不需要用引号包裹所有变量，也支持类似 <code>&amp;&amp;</code>，<code>||</code> 这样的逻辑操作而不需要用类似 <code>-a</code>，<code>-o</code> 这样的参数。</p><h3 id="双小括号"><a href="#双小括号" class="headerlink" title="双小括号"></a>双小括号</h3><p>算术展开的语法是  <code>$((expression))</code>，这是从其他编程语言来的人最顺手的算术操作方式。与  <code>test</code>  命令相比，</p><ul><li>C 风格的算术操作语法</li><li>Shell 会把  <code>expression</code>  内容的每一项都当做就像被引号包裹了一样。</li><li>会依次进行<strong>参数展开</strong>、<strong>命令替换</strong>，和  <strong>引号移除</strong>。</li></ul><p>因此可以不需要像  <code>test</code>  命令那样用引号包裹所有变量，也不需要注意空格，也可以写 C 风格的操作。</p><p>然后，对于C，1是ture，0是false。bah相反。</p><h3 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h3><p>因为test和[]是命令，所以逻辑运算符是以参数的形式体现。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">yangzhuo@n224-019-077:~/file$ [ 1 -ne 0 ]&amp;&amp;<span class="built_in">echo</span> ok</span><br><span class="line">ok</span><br><span class="line">yangzhuo@n224-019-077:~/file$ [ 1 -ne 0 || 1 -gt 0 ]&amp;&amp;<span class="built_in">echo</span> ok</span><br><span class="line">-bash: [: missing `]<span class="string">'</span></span><br><span class="line"><span class="string">-bash: 1: command not found</span></span><br></pre></td></tr></table></figure><p>只能这样</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yangzhuo@n224-019-077:~/file$ [ 1 -ne 0 ] || [ 1 -gt 0 ]&amp;&amp;<span class="built_in">echo</span> ok</span><br><span class="line">ok</span><br></pre></td></tr></table></figure><p>当然[[]]就不受限制</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yangzhuo@n224-019-077:~/file$ [[ 1 -ne 0  ||  1 -gt 0 ]]&amp;&amp;echo ok</span><br><span class="line">ok</span><br></pre></td></tr></table></figure><p>甚至</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yangzhuo@n224-019-077:~/file$ [[ 1 != 0  ||  1 &gt; 0 ]]&amp;&amp;<span class="built_in">echo</span> ok</span><br><span class="line">ok</span><br></pre></td></tr></table></figure><h2 id="选择语句"><a href="#选择语句" class="headerlink" title="选择语句"></a>选择语句</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">read</span> -p <span class="string">"num?"</span> num</span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$&#123;num&#125;</span> -gt 10 ]; <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"big"</span></span><br><span class="line"><span class="keyword">elif</span> [ <span class="variable">$&#123;num&#125;</span> - eq 10]; <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"equal"</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"small"</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><h2 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> [ <span class="string">"<span class="variable">$&#123;yn&#125;</span>"</span> != <span class="string">"yes"</span> -a <span class="string">"<span class="variable">$&#123;yn&#125;</span>"</span> != <span class="string">"YES"</span> ]</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"><span class="built_in">read</span> -p <span class="string">"Please input yes/YES to stop this program: "</span> yn </span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"OK! you input the correct answer."</span></span><br></pre></td></tr></table></figure><p>while do done结构，也有until do done，直到。。。其实没啥用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">s=0 <span class="comment"># 这是加总的数值变量</span></span><br><span class="line">i=0 <span class="comment"># 这是累计的数值，亦即是 1, 2, 3....</span></span><br><span class="line"><span class="keyword">while</span> [ <span class="string">"<span class="variable">$&#123;i&#125;</span>"</span> != <span class="string">"100"</span> ]</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">i=$（（<span class="variable">$i</span>+1）） <span class="comment"># 每次 i 都会增加 1</span></span><br><span class="line">s=$（（<span class="variable">$s</span>+<span class="variable">$i</span>）） <span class="comment"># 每次都会加总一次！</span></span><br><span class="line"><span class="keyword">done</span> <span class="built_in">echo</span> <span class="string">"The result of '1+2+3+...+100' is ==&gt; <span class="variable">$s</span>"</span></span><br></pre></td></tr></table></figure><p>这是while的一般用法。</p><p>for循环支持for in 和三段式</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">read</span> -p <span class="string">"Please input a number, I will count for 1+2+...+your_input: "</span> nu</span><br><span class="line">s=0</span><br><span class="line"><span class="keyword">for</span> （（ i=1; i&lt;=<span class="variable">$&#123;nu&#125;</span>; i=i+1 ））</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">s=$（（<span class="variable">$&#123;s&#125;</span>+<span class="variable">$&#123;i&#125;</span>））</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"The result of '1+2+3+...+<span class="variable">$&#123;nu&#125;</span>' is ==&gt; <span class="variable">$&#123;s&#125;</span>"</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> animal <span class="keyword">in</span> dog cat elephant</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"There are <span class="variable">$&#123;animal&#125;</span>s.... "</span> <span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>即in后面接空格隔开的，或者seq联系数字.</p><p>也可以直接使用 bash 的内置机制来处理！可以使用 {1..100} 来取代 $（seq 1 100） 。 大括号内的前面/后面用两个字符，中间以两个小数点来代表连续出现的意思。例如要持续输出 a, b, c…g 的话， 就可以使用“ echo {a..g} ”这样的表 示方式！</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> sitenu <span class="keyword">in</span> $（seq 1 100） <span class="comment"># seq 为 sequence（连续） 的缩写之意</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"><span class="comment"># 下面的程序在取得 ping 的回传值是正确的还是失败的！</span></span><br><span class="line">ping -c 1 -w 1 <span class="variable">$&#123;network&#125;</span>.<span class="variable">$&#123;sitenu&#125;</span> &amp;&gt; /dev/null &amp;&amp; result=0 || result=1</span><br><span class="line"><span class="comment"># 开始显示结果是正确的启动 （UP） 还是错误的没有连通 （DOWN）</span></span><br><span class="line">    <span class="keyword">if</span> [ <span class="string">"<span class="variable">$&#123;result&#125;</span>"</span> == 0 ]; <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"Server <span class="variable">$&#123;network&#125;</span>.<span class="variable">$&#123;sitenu&#125;</span> is UP."</span> </span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"Server <span class="variable">$&#123;network&#125;</span>.<span class="variable">$&#123;sitenu&#125;</span> is DOWN."</span> </span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;条件命令&quot;&gt;&lt;a href=&quot;#条件命令&quot; class=&quot;headerlink&quot; title=&quot;条件命令&quot;&gt;&lt;/a&gt;条件命令&lt;/h2&gt;&lt;p&gt;在bash脚本编程中，我们经常做一些条件判断， 我们主要用到了三种，test，单中括号，双中括号。&lt;/p&gt;
&lt;figure 
      
    
    </summary>
    
      <category term="技术" scheme="http://yoursite.com/blog/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="linux" scheme="http://yoursite.com/blog/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>shellScript入门</title>
    <link href="http://yoursite.com/blog/2019/09/08/9-8%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/blog/2019/09/08/9-8技术笔记/</id>
    <published>2019-09-08T06:56:26.000Z</published>
    <updated>2019-09-08T12:46:06.657Z</updated>
    
    <content type="html"><![CDATA[<h2 id="使用者输入变量内容"><a href="#使用者输入变量内容" class="headerlink" title="使用者输入变量内容"></a>使用者输入变量内容</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">read</span> -p <span class="string">"enter cnt"</span> cnt</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"will go <span class="variable">$cnt</span> num"</span></span><br><span class="line"></span><br><span class="line">yangzhuo@n224-019-077:~/file$ vim test.sh</span><br><span class="line">yangzhuo@n224-019-077:~/file$ sh test.sh</span><br><span class="line">enter cnt7</span><br><span class="line">will go 7 num</span><br></pre></td></tr></table></figure><p>read让用户输入参数</p><h2 id="时间处理"><a href="#时间处理" class="headerlink" title="时间处理"></a>时间处理</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">yesterday=`date -d last-day +%Y-%m-%d`</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$yesterday</span></span><br><span class="line"></span><br><span class="line">curday=`date +%Y-%m-%d`</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$curday</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"现在时间：`date '+%Y%m%d %T'`"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"现在时间：`date '+%Y%m%d %H%M%S'`"</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> `date <span class="string">'+%Y%m%d-%H%M%S'</span>`</span><br><span class="line"></span><br><span class="line">send=`date --date=<span class="string">'3 hours ago'</span> <span class="string">'+%Y-%m-%d %H:%M:%S'</span>`</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$send</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">2019-09-07</span><br><span class="line">2019-09-08</span><br><span class="line">现在时间：20190908 15:14:56</span><br><span class="line">现在时间：20190908 151456</span><br><span class="line">20190908-151456</span><br><span class="line">2019-09-08 12:14:56</span><br></pre></td></tr></table></figure><h2 id="默认参数"><a href="#默认参数" class="headerlink" title="默认参数"></a>默认参数</h2><p><strong><em>= 变量为null时, 同时改变变量值</em></strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@linuxidc /]# unset name</span><br><span class="line">[root@linuxidc /]# echo $&#123;name=linuxmi&#125;</span><br><span class="line">linuxmi</span><br><span class="line">[root@linuxidc /]# echo $name</span><br><span class="line">linuxmi</span><br><span class="line">[root@linuxidc /]# name=&quot;&quot;</span><br><span class="line">[root@linuxidc /]# echo $&#123;name=linuxmi&#125;</span><br><span class="line"></span><br><span class="line">[root@linuxidc /]#</span><br></pre></td></tr></table></figure><p><strong><em>-  变量为null时, 取默认值</em></strong></p><p><strong><em>:- 变量为null或空字符时, 取默认值</em></strong></p><p><strong><em>:= 变量为null时, 同时改变变量值</em></strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;使用者输入变量内容&quot;&gt;&lt;a href=&quot;#使用者输入变量内容&quot; class=&quot;headerlink&quot; title=&quot;使用者输入变量内容&quot;&gt;&lt;/a&gt;使用者输入变量内容&lt;/h2&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td
      
    
    </summary>
    
      <category term="技术" scheme="http://yoursite.com/blog/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="linux" scheme="http://yoursite.com/blog/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>awk</title>
    <link href="http://yoursite.com/blog/2019/09/04/9-4%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/blog/2019/09/04/9-4技术笔记/</id>
    <published>2019-09-04T06:08:02.000Z</published>
    <updated>2019-09-05T13:20:07.834Z</updated>
    
    <content type="html"><![CDATA[<h1 id="print"><a href="#print" class="headerlink" title="print"></a>print</h1><p>print其实和C差不多.</p><p>比如先来个文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">yangzhuo@n224-019-077:~/file$ cat print.txt</span><br><span class="line">Name Chinese English Math Average</span><br><span class="line">DmTsai 80 60 92 77.33</span><br><span class="line">VBird 75 55 80 70.00</span><br><span class="line">Ken 60 90 70 73.33</span><br></pre></td></tr></table></figure><p>%s,\t之类的，可以格式化输出</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">yangzhuo@n224-019-077:~/file$ <span class="built_in">printf</span> <span class="string">'%s\t %s\t %s\t %s\t %s\t \n'</span> $(cat print.txt)</span><br><span class="line">Name     Chinese     English     Math     Average</span><br><span class="line">DmTsai     80     60     92     77.33</span><br><span class="line">VBird     75     55     80     70.00</span><br><span class="line">Ken     60     90     70     73.33</span><br></pre></td></tr></table></figure><p>还可以指定位数和内容，方法和C类似</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">yangzhuo@n224-019-077:~/file$ <span class="built_in">printf</span> <span class="string">'%10s %5i %5i %5i %8.2f \n'</span> $(cat print.txt | grep -v Name)</span><br><span class="line">    DmTsai    80    60    92    77.33</span><br><span class="line">     VBird    75    55    80    70.00</span><br><span class="line">       Ken    60    90    70    73.33</span><br></pre></td></tr></table></figure><h1 id="awk"><a href="#awk" class="headerlink" title="awk"></a>awk</h1><h2 id="小栗子"><a href="#小栗子" class="headerlink" title="小栗子"></a>小栗子</h2><p>awk 主要是处理“每一行的字段内的数据”，而默认的“字段的分隔符号为 “空白键” 或 “[tab]键” ”。</p><p>比如刚才的数据，一共一行，每行有5列，这种表格状的数据，适合awk处理。</p><p>awk使用方式是<code></code>中放指令。</p><p>awk ‘条件类型1{动作1} 条件类型2{动作2} …’ filename</p><p>比如刚才的数据</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">yangzhuo@n224-019-077:~/file$ cat print.txt |awk <span class="string">'&#123;print $1 "\t" $3&#125;'</span></span><br><span class="line">Name    English</span><br><span class="line">DmTsai    60</span><br><span class="line">VBird    55</span><br><span class="line">Ken        90</span><br></pre></td></tr></table></figure><p>上表即是 awk 最常使用的动作，通过 print 的功能将字段数据列出来。字段的分隔则以空白键或 [tab] 按键来隔开。 因为不论哪一行都要处理，因此，就不需要有 “条件类型” 的限制！我所想要的是第一栏以及第三栏，每一行的每个字段都是有变量名称的，那就是 \$1, $2… 等变量名称。所以Name是第一个变量，English是第三个变量。</p><p>而\$0代表该行所有数据。</p><p>而非指令，即字符串，需要用“”包起来</p><h2 id="条件"><a href="#条件" class="headerlink" title="条件"></a>条件</h2><p>awk 的处理流程是：</p><ol><li><p>读入第一行，并将第一行的数据填入 $0, $1, $2…. 等变量当中； </p></li><li><p>依据 “条件类型” 的限制，判断是否需要进行后面的 “动作”； </p></li><li><p>做完所有的动作与条件类型； </p></li><li><p>若还有后续的“行”的数据，则重复上面 1~3 的步骤，直到所有的数据都读完为止。</p></li></ol><p>awk 是“以行为一次处理的单位”， 而“以字段为最小的处理单位”。，那么 awk 需要知道有多少行</p><table><thead><tr><th>变量名</th><th>含义</th></tr></thead><tbody><tr><td>NF</td><td>每行字段数（总列数）</td></tr><tr><td>NR</td><td>当前在第几行</td></tr><tr><td>FS</td><td>分割字符（默认空格）</td></tr></tbody></table><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">yangzhuo@n224-019-077:~/file$ cat print.txt |awk <span class="string">'&#123;print "line @   "NR "content"$1&#125;'</span></span><br><span class="line">line @   1contentName</span><br><span class="line">line @   2contentDmTsai</span><br><span class="line">line @   3contentVBird</span><br><span class="line">line @   4contentKen</span><br></pre></td></tr></table></figure><p>awk还可以逻辑判断，比如输出英语成绩大于85的学生</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yangzhuo@n224-019-077:~/file$ cat print.txt |awk <span class="string">'$3&gt;85&#123;print $0&#125;'</span></span><br><span class="line">Name Chinese English Math Average</span><br><span class="line">Ken 60 90 70 73.33</span><br></pre></td></tr></table></figure><p>这种写法就是’条件类型1{动作1}’，第三个变量大于85是条件，输出整行是动作。至于为什么第一行可以展示，估计是asclii之类的。</p><h2 id="变量和统计"><a href="#变量和统计" class="headerlink" title="变量和统计"></a>变量和统计</h2><p>BEGIN和END表示最前和最后做某事，比如BEGIN {FS=”:”} ，意思是把分隔符变成：，不然第二行才会开始生效。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">yangzhuo@n224-019-077:~/file$ cat print.txt |awk <span class="string">'NR==1&#123;printf "%10s %10s %10s %10s %10s %10s\n",$1,$2,$3,$4,$5,"total"&#125;</span></span><br><span class="line"><span class="string">NR&gt;=2&#123;total = $2 + $3 + $4</span></span><br><span class="line"><span class="string">printf "%10s %10d %10d %10d %10.2f %10d\n", $1, $2, $3, $4,$5, total&#125;'</span></span><br><span class="line">      Name    Chinese    English       Math    Average      total</span><br><span class="line">    DmTsai         80         60         92      77.33        232</span><br><span class="line">     VBird         75         55         80      70.00        210</span><br><span class="line">       Ken         60         90         70      73.33        220</span><br></pre></td></tr></table></figure><p>从这个例子可以看出，有这么几点</p><ol><li><p>printf格式化输出，用法和c类似</p></li><li><p>变量直接用名字和用即可，因为非变量用双引号括起来了</p></li><li><p>只要‘’的后单引号没结束，可以回车换行接着输入指令。</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;print&quot;&gt;&lt;a href=&quot;#print&quot; class=&quot;headerlink&quot; title=&quot;print&quot;&gt;&lt;/a&gt;print&lt;/h1&gt;&lt;p&gt;print其实和C差不多.&lt;/p&gt;
&lt;p&gt;比如先来个文件&lt;/p&gt;
&lt;figure class=&quot;highlight 
      
    
    </summary>
    
      <category term="技术" scheme="http://yoursite.com/blog/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="linux" scheme="http://yoursite.com/blog/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>grep与正则表达式</title>
    <link href="http://yoursite.com/blog/2019/08/30/8-30%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/blog/2019/08/30/8-30技术笔记/</id>
    <published>2019-08-30T07:19:09.000Z</published>
    <updated>2019-08-30T08:20:53.039Z</updated>
    
    <content type="html"><![CDATA[<h2 id="加单引号、双引号和不加引号"><a href="#加单引号、双引号和不加引号" class="headerlink" title="加单引号、双引号和不加引号"></a>加单引号、双引号和不加引号</h2><p><strong>单引号：</strong></p><p>可以说是所见即所得：即将单引号内的内容原样输出，或者描述为单引号里面看到的是什么就会输出什么。单引号’’是全引用，被单引号括起的内容不管是常量还是变量者不会发生替换。</p><p><strong>双引号：</strong></p><p>把双引号内的内容输出出来；如果内容中有命令、变量等，会先把变量、命令解析出结果，然后在输出最终内容来。双引号””是部分引用，被双引号括起的内容常量还是常量，变量则会发生替换，替换成变量内容。</p><p><strong>不加引号：</strong></p><p>不会将含有空格的字符串视为一个整体输出, 如果内容中有命令、变量等，会先把变量、命令解析出结果，然后在输出最终内容来，如果字符串中带有空格等特殊字符，则不能完整的输出，需要改加双引号，一般连续的字符串，数字，路径等可以用。</p><h2 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h2><p>grep搜索的内容，可以输入正则表达式，如果不想输入正则表达式，即不想被解析，可以使用fgerp。</p><p>比如，有文件a，如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">yangzhuo@n224-019-077:~/file$ cat a</span><br><span class="line">s</span><br><span class="line">dsa</span><br><span class="line">fasf</span><br><span class="line">wwwwwwwlswwwwwwwwwwww</span><br><span class="line">fsaf</span><br><span class="line">fasdasdw</span><br><span class="line">da</span><br></pre></td></tr></table></figure><p>可以用[]来搜索集合字符，其中^表示不</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">yangzhuo@n224-019-077:~/file$ grep l[sd] a</span><br><span class="line">wwwwwwwlswwwwwwwwwwww</span><br><span class="line">yangzhuo@n224-019-077:~/file$ grep l[^<span class="built_in">cd</span>] a</span><br><span class="line">wwwwwwwlswwwwwwwwwwww</span><br></pre></td></tr></table></figure><p>grep l[sd] a表示在a中搜索ls或者ld。</p><p>grep l[^cd] a表示a中搜索除了lc和ld其他。</p><p>正如正则表达式，[1-9][a-z][^A-Z]这些表达也是可以的。</p><h2 id="行首与行尾字符"><a href="#行首与行尾字符" class="headerlink" title="行首与行尾字符 ^ $"></a>行首与行尾字符 ^ $</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">yangzhuo@n224-019-077:~/file$ grep ^f a</span><br><span class="line">fasf</span><br><span class="line">fsaf</span><br><span class="line">fasdasdw</span><br><span class="line">yangzhuo@n224-019-077:~/file$ grep w$ a</span><br><span class="line">wwwwwwwlswwwwwwwwwwww</span><br><span class="line">fasdasdw</span><br><span class="line">yangzhuo@n224-019-077:~/file$</span><br></pre></td></tr></table></figure><p>如上，^表示句首，$表示句尾。同时可以使用正则表达式</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">yangzhuo@n224-019-077:~/file$ grep ^[^sd] a</span><br><span class="line">fasf</span><br><span class="line">wwwwwwwlswwwwwwwwwwww</span><br><span class="line">fsaf</span><br><span class="line">fasdasdw</span><br><span class="line">yangzhuo@n224-019-077:~/file$</span><br></pre></td></tr></table></figure><p>表示不以s或者d开头的</p><h2 id="转义与egrep"><a href="#转义与egrep" class="headerlink" title="转义与egrep"></a>转义与egrep</h2><p>正则表达式中，.表示任意字符，*表示重复前面字符0到无穷次，{a,b}表示重复前面字符a到b次，但是在grep中，输入这种特殊符号需要转义.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">yangzhuo@n224-019-077:~/file$ grep w\* a</span><br><span class="line">s</span><br><span class="line">dsa</span><br><span class="line">fasf</span><br><span class="line">wwwwwwwlswwwwwwwwwwww</span><br><span class="line">fsaf</span><br><span class="line">fasdasdw</span><br><span class="line">da</span><br></pre></td></tr></table></figure><p>再比如</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">yangzhuo@n224-019-077:~/file$ grep <span class="string">'w\+'</span> a</span><br><span class="line">wwwwwwwlswwwwwwwwwwww</span><br><span class="line">fasdasdw</span><br><span class="line">yangzhuo@n224-019-077:~/file$ grep <span class="string">'w\&#123;2,\&#125;'</span> a</span><br><span class="line">wwwwwwwlswwwwwwwwwwww</span><br></pre></td></tr></table></figure><p>没输一个字符都要转义，未免太麻烦了吧，可以使用egrep。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yangzhuo@n224-019-077:~/file$ egrep <span class="string">'w+'</span> a</span><br><span class="line">wwwwwwwlswwwwwwwwwwww</span><br><span class="line">fasdasdw</span><br></pre></td></tr></table></figure><p>esay~~</p><p>还有fgrep，就是怎么输都是纯文本</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;加单引号、双引号和不加引号&quot;&gt;&lt;a href=&quot;#加单引号、双引号和不加引号&quot; class=&quot;headerlink&quot; title=&quot;加单引号、双引号和不加引号&quot;&gt;&lt;/a&gt;加单引号、双引号和不加引号&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;单引号：&lt;/strong&gt;&lt;/p&gt;

      
    
    </summary>
    
      <category term="技术" scheme="http://yoursite.com/blog/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="linux" scheme="http://yoursite.com/blog/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>重定向与文件描述符</title>
    <link href="http://yoursite.com/blog/2019/08/26/8-26%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/blog/2019/08/26/8-26技术笔记/</id>
    <published>2019-08-26T02:31:51.000Z</published>
    <updated>2019-08-29T10:29:08.250Z</updated>
    
    <content type="html"><![CDATA[<h1 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h1><p>标准输出是键盘，标准输出是屏幕，标准错误输出是屏幕。</p><p>但是可以重定向，改变输入和输出的位置。</p><h2 id="简单重定向"><a href="#简单重定向" class="headerlink" title="简单重定向"></a>简单重定向</h2><ul><li>cmd &gt; file</li></ul><p>把cmd命令的输出重定向到文件file中。如果file已经存在，则清空原有文件，使用bash的<a href="http://linux-wiki.cn/index.php?title=Noclobber&amp;action=edit&amp;redlink=1" title="Noclobber（尚未撰写）" target="_blank" rel="noopener">noclobber</a>选项可以防止覆盖原有文件。</p><ul><li>cmd &gt;&gt; file</li></ul><p>把cmd命令的输出重定向到文件file中，如果file已经存在，则把信息加在原有文件后面。</p><ul><li>cmd &lt; file</li></ul><p>使cmd命令从file读入</p><h2 id="文件描述符"><a href="#文件描述符" class="headerlink" title="文件描述符"></a>文件描述符</h2><p>Shell 中对文件描述符的操作由三部分组成:  <code>(Left, Operation, Right)</code>:</p><ul><li>Left 可以是 0-9 的数字, 代表第 n 号文件描述符;<ul><li>Left 还可以为  <code>&amp;</code>, 表示同时操作  <code>stdout</code>  和  <code>stderr</code></li></ul></li><li>Right 可以是文件名或 0-9 的数字, 当 Right 是数字时必须要加上  <code>&amp;</code>  符号, 表示引用第 n 号文件描述符;<ul><li>Right 还可以为  <code>&amp;-</code>, 此时表示关闭 Left 描述符, 例如  <code>2&lt;&amp;-</code>  表示关闭 stderr;</li></ul></li><li>Operation 可以为  <code>&lt;</code>  或  <code>&gt;</code>;<ul><li>为  <code>&lt;</code>  时表示以读模式复制 Right 到 Left, 此时如果没有指定 Left 的话, 则为默认值 0;</li><li>当为  <code>&gt;</code>  表示以写模式复制 Right 到 Left, 此时如果没有指定 Left 的话, 则为默认值 1;</li><li>Operation 和 Left 之间不能有空格;</li><li>当 Right 为文件名时, Operation 和 Right 可以有空格, 否则也不能有空格;</li></ul></li></ul><pre><code>可以使用exec命令创建自定义的描述符。</code></pre><p>   创建一个文件a，其内容是hello。实验如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yangzhuo@n224-019-077:~/file$ cat 0&lt;a</span><br><span class="line">hello</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">yangzhuo@n224-019-077:~/file$ ls &amp;&gt;a</span><br><span class="line">yangzhuo@n224-019-077:~/file$ cat a</span><br><span class="line">0703老清北线下发货明细 - 填写模板.csv</span><br><span class="line">7-8赠课.csv</span><br><span class="line">a</span><br><span class="line">buyGift.csv</span><br><span class="line">giftSheet.csv</span><br><span class="line">userInfo.csv</span><br><span class="line">换新单号表格.csv</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yangzhuo@n224-019-077:~/file$ ls noexist &amp;&gt;a</span><br><span class="line">yangzhuo@n224-019-077:~/file$ cat a</span><br><span class="line">ls: cannot access <span class="string">'noexist'</span>: No such file or directory</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yangzhuo@n224-019-077:~/file$ <span class="built_in">exec</span> 3&lt; a</span><br><span class="line">yangzhuo@n224-019-077:~/file$ cat &lt;&amp;3</span><br><span class="line">ls: cannot access <span class="string">'noexist'</span>: No such file or directory</span><br></pre></td></tr></table></figure><p>如果要再次读取，我们就不能再继续使用文件描述符3了，而是需要用exec重新分配文件描述符3以便用于读取。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;重定向&quot;&gt;&lt;a href=&quot;#重定向&quot; class=&quot;headerlink&quot; title=&quot;重定向&quot;&gt;&lt;/a&gt;重定向&lt;/h1&gt;&lt;p&gt;标准输出是键盘，标准输出是屏幕，标准错误输出是屏幕。&lt;/p&gt;
&lt;p&gt;但是可以重定向，改变输入和输出的位置。&lt;/p&gt;
&lt;h2 id=&quot;
      
    
    </summary>
    
      <category term="技术" scheme="http://yoursite.com/blog/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="linux" scheme="http://yoursite.com/blog/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>shell入门</title>
    <link href="http://yoursite.com/blog/2019/08/22/8-22%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0-1/"/>
    <id>http://yoursite.com/blog/2019/08/22/8-22技术笔记-1/</id>
    <published>2019-08-22T02:26:10.000Z</published>
    <updated>2019-08-22T07:01:37.222Z</updated>
    
    <content type="html"><![CDATA[<h1 id="名字"><a href="#名字" class="headerlink" title="名字"></a>名字</h1><p>第一个流行的 shell 是由 Steven Bourne 发展出来的，为了纪念他所以就称为 Bourne shell ，或直接简称为 sh。。至于 Linux 使用的这一种版本就称为“ Bourne Again SHell （简称 bash） ”，这个 Shell 是 Bourne Shell 的增强版本，也是基准于 GNU 的架构下发展出来的</p><h1 id="echo"><a href="#echo" class="headerlink" title="echo"></a>echo</h1><p>echo不但能输出字符串，还能显示变量，或者重定向到文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"><span class="built_in">read</span> name </span><br><span class="line"><span class="built_in">echo</span> <span class="string">"<span class="variable">$name</span> It is a test"</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">"It is a test"</span> &gt; myfile</span><br></pre></td></tr></table></figure><p>如果使用单引号，表示不转义，不取变量</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">'$name\"'</span></span><br><span class="line"><span class="comment">#输出结果：$name\"</span></span><br></pre></td></tr></table></figure><h1 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h1><p>我们可以在执行 Shell 脚本时，向脚本传递参数，脚本内获取参数的格式为：<strong>$n</strong>。<strong>n</strong> 代表一个数字。第0个参数是文件名，后面的第1，第2，第3个参数就是传入的。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"Shell 传递参数实例！"</span>;</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"执行的文件名：<span class="variable">$0</span>"</span>;</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"第一个参数为：<span class="variable">$1</span>"</span>;</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"第二个参数为：<span class="variable">$2</span>"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">#输出结果</span></span><br><span class="line"><span class="comment">#$ ./test.sh 1 2 </span></span><br><span class="line"><span class="comment">#Shell 传递参数实例！</span></span><br><span class="line"><span class="comment">#执行的文件名：./test.sh</span></span><br><span class="line"><span class="comment">#第一个参数为：1</span></span><br><span class="line"><span class="comment">#第二个参数为：2</span></span><br></pre></td></tr></table></figure><h1 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h1><p>定义变量时，直接申明并赋值即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">name=<span class="string">"xx"</span></span><br></pre></td></tr></table></figure><p>使用时，\$变量名，或者\${变量名}</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">name=<span class="string">"ww"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$your_name</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;your_name&#125;</span></span><br></pre></td></tr></table></figure><p>已定义的变量，可以被重新定义，但可以readonly 命令可以将变量定义为只读变量，只读变量的值不能被改变。用unset可以删除变量。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;名字&quot;&gt;&lt;a href=&quot;#名字&quot; class=&quot;headerlink&quot; title=&quot;名字&quot;&gt;&lt;/a&gt;名字&lt;/h1&gt;&lt;p&gt;第一个流行的 shell 是由 Steven Bourne 发展出来的，为了纪念他所以就称为 Bourne shell ，或直接简称为 sh
      
    
    </summary>
    
      <category term="技术" scheme="http://yoursite.com/blog/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="linux" scheme="http://yoursite.com/blog/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>压缩文件</title>
    <link href="http://yoursite.com/blog/2019/08/16/8-16%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/blog/2019/08/16/8-16技术笔记/</id>
    <published>2019-08-16T06:32:00.000Z</published>
    <updated>2019-08-20T06:42:45.173Z</updated>
    
    <content type="html"><![CDATA[<h1 id="打包和压缩"><a href="#打包和压缩" class="headerlink" title="打包和压缩"></a>打包和压缩</h1><p>常见的压缩文件，都是.tar.gz结尾的，有双重含义，即打包并压缩。</p><p>原因在于，压缩文件，压缩的是一个文件而不是文件夹，需要先把文件夹打包成一个文件，所以压缩一般都是先打包再压缩。</p><h1 id="gzip"><a href="#gzip" class="headerlink" title="gzip"></a>gzip</h1><p>gzip是GNUzip的缩写，最早用于UNIX系统的文件压缩。HTTP协议上的gzip编码是一种用来改进web应用程序性能的技术，web服务器和客户端（浏览器）必须共同支持gzip。目前主流的浏览器，Chrome,firefox,IE等都支持该协议。常见的服务器如Apache，Nginx，IIS同样支持gzip。</p><h1 id="压缩和解压"><a href="#压缩和解压" class="headerlink" title="压缩和解压"></a>压缩和解压</h1><p>与windows习惯不同的是，Linux默认压缩后，原文件就没了，所以如果是要执行把某文件夹A压缩成压缩文件B，需要参数和指定压缩文件名</p><p>tar可以带参数-z，意思是并且用gzip压缩，所以一个指令即可打包并压缩文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zcf log.tar.gz log2012.log</span><br></pre></td></tr></table></figure><p>c参数就是产生新的包，f参数指定位置。</p><p>而解压缩，则需要参数x。其中参数-C，即指定解压的位置。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -xzf go1.10.4.linux-amd64.tar.gz -C /usr/<span class="built_in">local</span></span><br></pre></td></tr></table></figure><p>而参数t，指的是我就看看</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -ztf log.tar.gz</span><br></pre></td></tr></table></figure><p>实际上</p><p>-c:  建立压缩档案  </p><p>-x：解压  </p><p>-t：查看内容  </p><p>-r：向压缩归档文件末尾追加文件  </p><p>-u：更新原压缩包中的文件</p><p>这五个是独立的命令，压缩解压都要用到其中一个，可以和别的命令连用但只能用其中一个。下面的参数是根据需要在压缩或解压档案时可选的。</p><p>-z：有gzip属性的  </p><p>-j：有bz2属性的 </p><p> -v：显示所有过程  </p><p>-O：将文件解开到标准输出</p><p>参数 -f 是必须的:</p><p>-f:  使用档案名字，切记，这个参数是最后一个参数，后面只能接档案名。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;打包和压缩&quot;&gt;&lt;a href=&quot;#打包和压缩&quot; class=&quot;headerlink&quot; title=&quot;打包和压缩&quot;&gt;&lt;/a&gt;打包和压缩&lt;/h1&gt;&lt;p&gt;常见的压缩文件，都是.tar.gz结尾的，有双重含义，即打包并压缩。&lt;/p&gt;
&lt;p&gt;原因在于，压缩文件，压缩的是一个
      
    
    </summary>
    
      <category term="技术" scheme="http://yoursite.com/blog/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="linux" scheme="http://yoursite.com/blog/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>linux文件目录与链接</title>
    <link href="http://yoursite.com/blog/2019/08/14/8-14%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0-1/"/>
    <id>http://yoursite.com/blog/2019/08/14/8-14技术笔记-1/</id>
    <published>2019-08-14T07:18:55.000Z</published>
    <updated>2019-08-15T02:18:05.550Z</updated>
    
    <content type="html"><![CDATA[<h1 id="文件目录"><a href="#文件目录" class="headerlink" title="文件目录"></a>文件目录</h1><p><code>/ 根目录</code></p><p><code>├── bin 存放用户二进制文件</code></p><p><code>├── boot 存放内核引导配置文件</code></p><p><code>├── dev 存放设备文件</code></p><p><code>├── etc 存放系统配置文件</code></p><p><code>├── home 用户主目录</code></p><p><code>├── lib 动态共享库</code></p><p><code>├── lost+found 文件系统恢复时的恢复文件</code></p><p><code>├── media 可卸载存储介质挂载点</code></p><p><code>├── mnt 文件系统临时挂载点</code></p><p><code>├── opt 附加的应用程序包</code></p><p><code>├── proc 系统内存的映射目录，提供内核与进程信息</code></p><p><code>├── root root 用户主目录</code></p><p><code>├── sbin 存放系统二进制文件</code></p><p><code>├── srv 存放服务相关数据</code></p><p><code>├── sys sys 虚拟文件系统挂载点</code></p><p><code>├── tmp 存放临时文件</code></p><p><code>├── usr 存放用户应用程序</code></p><p><code>└── var 存放邮件、系统日志等变化文件</code></p><p>Linux 与其他类 UNIX 系统一样并不区分文件与目录：目录是记录了其他文件名的文件。使用命令 mkdir 创建目录时，若期望创建的目录的名称与现有的文件名（或目录名）重复，则会创建失败。Linux 将设备当做文件进行处理。</p><h1 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h1><p>我们知道文件都有文件名与数据，这在 Linux 上被分成两个部分：用户数据 (user data) 与元数据 (metadata)。用户数据，即文件数据块 (data block)，数据块是记录文件真实内容的地方；而元数据则是文件的附加属性，如文件大小、创建时间、所有者等信息。在 Linux 中，元数据中的 inode 号（inode 是文件元数据的一部分但其并不包含文件名，inode 号即索引节点号）才是文件的唯一标识而非文件名。文件名仅是为了方便人们的记忆和使用，系统或程序通过 inode 号寻找正确的文件数据块。</p><p>为解决文件的共享使用，Linux 系统引入了两种链接：硬链接 (hard link) 与软链接（又称符号链接，即 soft link 或 symbolic link）。链接为 Linux 系统解决了文件的共享使用，还带来了隐藏文件路径、增加权限安全及节省存储等好处。</p><h2 id="硬链接"><a href="#硬链接" class="headerlink" title="硬链接"></a>硬链接</h2><p>若一个 inode 号对应多个文件名，则称这些文件为硬链接。换言之，硬链接就是同一个文件使用了多个别名。硬链接可由命令 link 或 ln 创建。</p><p>可以说，硬链接就是个文件名。</p><h2 id="软链接"><a href="#软链接" class="headerlink" title="软链接"></a>软链接</h2><p>软链接则是真正的文件，但文件的内容即inode，是另一个文件的的路径名。</p><p>使用 find 命令，其不仅可查找某文件的软链接，还可以用于查找相同 inode 的所有硬链接。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;文件目录&quot;&gt;&lt;a href=&quot;#文件目录&quot; class=&quot;headerlink&quot; title=&quot;文件目录&quot;&gt;&lt;/a&gt;文件目录&lt;/h1&gt;&lt;p&gt;&lt;code&gt;/ 根目录&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;├── bin 存放用户二进制文件&lt;/code&gt;&lt;/p&gt;
&lt;
      
    
    </summary>
    
      <category term="技术" scheme="http://yoursite.com/blog/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="linux" scheme="http://yoursite.com/blog/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>linux文件权限和管理</title>
    <link href="http://yoursite.com/blog/2019/08/12/8-12%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/blog/2019/08/12/8-12技术笔记/</id>
    <published>2019-08-12T07:36:01.000Z</published>
    <updated>2019-08-13T03:19:53.298Z</updated>
    
    <content type="html"><![CDATA[<h1 id="文件权限"><a href="#文件权限" class="headerlink" title="文件权限"></a>文件权限</h1><p>linux文件系统，权限和用户有关，linux是多用户系统，在用户之上还有一层分组的概念，很容易理解。所以任何一个理解，都有三种不同不同的权限，文件拥有者的权限，群组的权限，其他人的权限。</p><p>进入一个文件目录，输入ls -al，其中一行返回如下。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-rw-r--r--.  1    root     root     176  Dec 29  2013 .bash_profile</span><br></pre></td></tr></table></figure><p>返回值一共有7个，分别是权限，链接数，拥有者，群组，文件大小，修改日期，文件名。</p><p>其中权限一共十个字符，可以分为4组，即1-3-3-3.</p><p>第一组，一个字符，表示文件类型</p><ul><li>当为[ d ]则是目录；</li><li>当为[ - ]则是文件；</li><li>若是[ l ]则表示为链接文件（link file）；</li><li>若是[ b ]则表示为设备文件里面的可供储存的周边设备（可随机存取设备）；</li><li>若是[ c ]则表示为设备文件里面的序列埠设备，例如键盘、鼠标（一次性读取设备）。</li></ul><p>第二组，三个字符，表示拥有者权限，分别表示可读，可写，可执行。如果有就有相应字符，没有就是减号。</p><p>比如rwx表示可读可写可执行，r-x表示可读不可写可执行。</p><p>其中目录的x权限，是指进入该目录的权限。通常要开放的目录， 至少会具备 rx 这两个权限</p><p>第三组，三个字符，表示群组权限。</p><p>第四组，三个字符，表示其他人权限。</p><p>链接数，有多少文件名链接到此节点（i-node）</p><h2 id="改变文件权限"><a href="#改变文件权限" class="headerlink" title="改变文件权限"></a>改变文件权限</h2><ul><li>chgrp ：改变文件所属群组</li><li>chown ：改变文件拥有者</li><li>chmod ：改变文件的权限,</li></ul><p>chgrp和chown类似，其中有个参数-R，指递归得进行改变，用于目录。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chgrp users initial-setup-ks.cfg</span><br></pre></td></tr></table></figure><p>把initial-setup-ks.cfg的群组改变成了users。</p><p>chmod，可以用数字和符号两种写法，数字就是二进制加，参数-R，指递归得进行改变，用于目录。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod 740 .bashrc</span><br></pre></td></tr></table></figure><p>表示把.bashrc的用户权限变成4+2+1:rwx;群组权限4:r–;其他权限0:—。</p><p>也可以直接写</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod u=rwx,g=rx,o=r filename</span><br></pre></td></tr></table></figure><p>或者写一起；也可以用加减号表示增减</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chmod  u=rwx,go=rx  .bashrc</span><br><span class="line">chmod  a-x  .bashrc</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;文件权限&quot;&gt;&lt;a href=&quot;#文件权限&quot; class=&quot;headerlink&quot; title=&quot;文件权限&quot;&gt;&lt;/a&gt;文件权限&lt;/h1&gt;&lt;p&gt;linux文件系统，权限和用户有关，linux是多用户系统，在用户之上还有一层分组的概念，很容易理解。所以任何一个理解，都有
      
    
    </summary>
    
      <category term="技术" scheme="http://yoursite.com/blog/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="linux" scheme="http://yoursite.com/blog/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>channel泄漏和关闭</title>
    <link href="http://yoursite.com/blog/2019/07/29/7-29%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/blog/2019/07/29/7-29技术笔记/</id>
    <published>2019-07-29T09:11:53.000Z</published>
    <updated>2019-08-05T03:57:42.499Z</updated>
    
    <content type="html"><![CDATA[<h1 id="channel内存泄漏"><a href="#channel内存泄漏" class="headerlink" title="channel内存泄漏"></a>channel内存泄漏</h1><p>造成channel泄漏的原因很简单，协程持有channel，一直阻塞不释放。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">goroutineB</span><span class="params">(b <span class="keyword">chan</span>&lt;- <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">b&lt;<span class="number">-1</span></span><br><span class="line">b&lt;<span class="number">-2</span></span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">ch := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>)</span><br><span class="line"><span class="keyword">go</span> goroutineB(ch)</span><br><span class="line"><span class="keyword">for</span> i:=<span class="keyword">range</span> ch&#123;</span><br><span class="line">fmt.Printf(<span class="string">"%d\n"</span>,i)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>for range 会阻塞，读两次后，没数据了，就阻塞了。然后该channel不会被释放，死锁。或者select操作也是。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">goroutineA</span><span class="params">(a &lt;-<span class="keyword">chan</span> <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line"><span class="keyword">case</span> i:=&lt;-a: fmt.Printf(<span class="string">"%d\n"</span>,i)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line"><span class="keyword">case</span> i:=&lt;-a: fmt.Printf(<span class="string">"%d\n"</span>,i)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Printf(<span class="string">"out"</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">goroutineB</span><span class="params">(b <span class="keyword">chan</span>&lt;- <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">b&lt;<span class="number">-1</span></span><br><span class="line"><span class="comment">//close(b)</span></span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">ch := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>)</span><br><span class="line"><span class="keyword">go</span> goroutineA(ch)</span><br><span class="line"><span class="keyword">go</span> goroutineB(ch)</span><br><span class="line">time.Sleep(<span class="number">3</span>*time.Second)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如图，B只产生了一个数据，A试图select读两次，造成A阻塞，同时chan也得不到释放。</p><h1 id="channel关闭"><a href="#channel关闭" class="headerlink" title="channel关闭"></a>channel关闭</h1><p>解决上面情况很简单，即去掉注释，B产生完数据后关闭通道。</p><p>然而有个问题，go在发送侧无法得知通道是否已经关闭，接受侧也只能尝试读一个，才能知道是否关闭。关闭一个已关闭的通道，向一个已关闭的通道发送数据，都会导致panic。</p><p>即channel没有提供isClosed()方法，不然直接写</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> !ch.isClosed()&#123;</span><br><span class="line">    ch&lt;-data</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> !ch.isClosed()&#123;</span><br><span class="line">    ch.<span class="built_in">close</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>没法实现，只能从设计侧解决。</p><h2 id="接受侧不关闭通道"><a href="#接受侧不关闭通道" class="headerlink" title="接受侧不关闭通道"></a>接受侧不关闭通道</h2><p>很简单，适用于1v1场景，发送侧觉得自己发完了，记得要关闭通道即可，接受侧不做处理。</p><h2 id="如果有多个发送侧，不关闭通道"><a href="#如果有多个发送侧，不关闭通道" class="headerlink" title="如果有多个发送侧，不关闭通道"></a>如果有多个发送侧，不关闭通道</h2><p>不关闭的意思是，不调用close，而让gc回收。而发出关闭指令，让发送侧别发了的，是接受端，怎么搞呢。</p><p>这里要分情况，一个1vn:再来个channel，用于接受侧，发送停止信号。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">goroutineA</span><span class="params">(a &lt;-<span class="keyword">chan</span> <span class="keyword">int</span>, stop <span class="keyword">chan</span>&lt;-<span class="keyword">struct</span>&#123;&#125;)</span></span> &#123;</span><br><span class="line">c:=<span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i:=<span class="keyword">range</span> a &#123;</span><br><span class="line">fmt.Printf(<span class="string">"%d\n"</span>, i)</span><br><span class="line">c++</span><br><span class="line"><span class="keyword">if</span> c &gt;= <span class="number">10</span> &#123;</span><br><span class="line"><span class="built_in">close</span>(stop)</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">fmt.Printf(<span class="string">"out"</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">goroutineB</span><span class="params">(b <span class="keyword">chan</span>&lt;- <span class="keyword">int</span>,stop &lt;-<span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;)</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line"><span class="keyword">case</span> &lt;-stop:</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line"><span class="keyword">case</span> b &lt;- <span class="number">1</span>:</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">goroutineC</span><span class="params">(b <span class="keyword">chan</span>&lt;- <span class="keyword">int</span>,stop &lt;-<span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;)</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line"><span class="keyword">case</span> &lt;-stop:</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line"><span class="keyword">case</span> b &lt;- <span class="number">1</span>:</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">ch := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>)</span><br><span class="line">stop := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;)</span><br><span class="line"><span class="keyword">go</span> goroutineA(ch,stop)</span><br><span class="line"><span class="keyword">go</span> goroutineB(ch,stop)</span><br><span class="line"><span class="keyword">go</span> goroutineC(ch,stop)</span><br><span class="line">time.Sleep(<span class="number">3</span>*time.Second)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如上，B和C是两个生产者，向chan里生产信息，A是接受者，A不想接受了，就关闭stop通道，BC接收到stop通道关闭信息，就不生产了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;channel内存泄漏&quot;&gt;&lt;a href=&quot;#channel内存泄漏&quot; class=&quot;headerlink&quot; title=&quot;channel内存泄漏&quot;&gt;&lt;/a&gt;channel内存泄漏&lt;/h1&gt;&lt;p&gt;造成channel泄漏的原因很简单，协程持有channel，一直阻塞
      
    
    </summary>
    
      <category term="技术" scheme="http://yoursite.com/blog/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="go" scheme="http://yoursite.com/blog/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>goSlcie细节</title>
    <link href="http://yoursite.com/blog/2019/07/23/7-23%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/blog/2019/07/23/7-23技术笔记/</id>
    <published>2019-07-23T13:18:59.000Z</published>
    <updated>2019-07-23T13:20:09.386Z</updated>
    
    <content type="html"><![CDATA[<h1 id="List"><a href="#List" class="headerlink" title="List"></a>List</h1><h2 id="nil切片与空切片"><a href="#nil切片与空切片" class="headerlink" title="nil切片与空切片"></a>nil切片与空切片</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> s1 []<span class="keyword">int</span></span><br><span class="line"><span class="keyword">var</span> s2 = *<span class="built_in">new</span>([]<span class="keyword">int</span>)</span><br><span class="line"><span class="keyword">var</span> s3 = <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="number">0</span>)</span><br><span class="line"><span class="keyword">var</span> s4 = []<span class="keyword">int</span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>前两者是nil切片，==nil。</p><p>后两者是空切片，!=nil，数据指针都指向同一个地址 <code>0xc42003bda0</code></p><p>四者的len都是0，所以应该用len(list)==0来判断返回值。</p><h2 id="扩容"><a href="#扩容" class="headerlink" title="扩容"></a>扩容</h2><p>扩容规则并不是网传的小于1024两倍，大于1024就1.25倍这么简单</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">s := []<span class="keyword">int</span>&#123;<span class="number">1</span>,<span class="number">2</span>&#125;</span><br><span class="line">s = <span class="built_in">append</span>(s,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>)</span><br><span class="line">fmt.Printf(<span class="string">"%d %d    \n"</span>,<span class="built_in">len</span>(s),<span class="built_in">cap</span>(s))</span><br><span class="line">s = <span class="built_in">append</span>(s,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>)</span><br><span class="line">s = <span class="built_in">append</span>(s,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>)</span><br><span class="line">fmt.Printf(<span class="string">"%d %d"</span>,<span class="built_in">len</span>(s),<span class="built_in">cap</span>(s))</span><br></pre></td></tr></table></figure><p>输出并不是5 8 11 16</p><p>而是5 6 11 12</p><h4 id="基于cap的增长规则"><a href="#基于cap的增长规则" class="headerlink" title="基于cap的增长规则"></a>基于cap的增长规则</h4><p>根本问题在于，可能扩容后依然不够装，为了避免这个问题，当简单规则计算后，仍不够装时，会采用基于cap的增长规则。</p><p>1.计算新cap,以例子为例，翻倍仍不够，新cap是2+3=5；</p><p>2.内存对齐，内存对齐，简单来说需要多少个8（小于1024）/128（大于1024）字节，可以内存对齐，这里是6个。具体来说，一共五个数，每个数的指针大小为8（64位机），先算出空间40，算出实际需要索引4，然后查一个内存对齐表，索引4处值为48，48即6。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;List&quot;&gt;&lt;a href=&quot;#List&quot; class=&quot;headerlink&quot; title=&quot;List&quot;&gt;&lt;/a&gt;List&lt;/h1&gt;&lt;h2 id=&quot;nil切片与空切片&quot;&gt;&lt;a href=&quot;#nil切片与空切片&quot; class=&quot;headerlink&quot; title=
      
    
    </summary>
    
      <category term="技术" scheme="http://yoursite.com/blog/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="go" scheme="http://yoursite.com/blog/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>goMap细节</title>
    <link href="http://yoursite.com/blog/2019/07/18/7-18%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/blog/2019/07/18/7-18技术笔记/</id>
    <published>2019-07-18T06:08:30.000Z</published>
    <updated>2019-07-23T13:20:23.593Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Map实现"><a href="#Map实现" class="headerlink" title="Map实现"></a>Map实现</h1><h2 id="存储"><a href="#存储" class="headerlink" title="存储"></a>存储</h2><p>我看来go的Map综合了开放寻址法和拉链法。</p><p>核心在于分桶，存储kv数据的在两个桶的数组中，一个数据桶，一个额外数据桶。后者是用于拉链法来解决哈希冲突的。</p><p>每个桶中可以存八对kv，在桶中是使用开发寻址法，如果溢出，有指向对应的溢出桶的指针，这时是拉链法。</p><p>通过具体的访问过程可知。首先是计算哈希值，这样就找到了对应的桶（此处有旧桶新桶问题），然后进入桶中查找，和桶中已存的一一比较，如果没有，则看桶链接的下一个桶（如果存在）。</p><p>特色在于快速试错，桶中除了key和value的大小为8的各一个数组外，还有个topbits的数组，即该键值对哈希值的前八位，这样每次访问不用直接比较key，只用比较哈希值的前八位，就可以快速试错。</p><p>其实就像是一级缓存，它存储的是哈希最高的 8 位，而选择桶时使用了桶掩码使用的是最低的几位，这种方式能够帮助我们快速判断当前的键值对是否存在并且减少碰撞。</p><p>有一个问题，哪些类型可以作为key的类型，不能比较的比如函数当然不能，float64语法上能实际上不能吗，原因在于NAN（not a number)，NAN != NAN hash(NAN) != hash(NAN)，以及float64的不能精确存储。</p><h2 id="扩容"><a href="#扩容" class="headerlink" title="扩容"></a>扩容</h2><p>扩容就是新建一个两倍大的桶数组，然后数据搬迁过去。问题在于，哈希表过大时，搬迁成本很高，这里解决方法是，同时持有新旧两个数组，逐步搬迁。所以扩容是一个非阻塞的相对缓慢完成的一个过程。</p><p>扩容原因有两个，装载因子过大，或者溢出桶太多。两种情况下扩容方法不一样。</p><p>后者与其说扩容，不如说重整，即是<strong>不改变大小的扩容动作</strong>。而前者会扩容到两倍。</p><p>造成溢出桶数量过多的原因有两种：其一，反复进行插入再删除。先插入一些元素，溢出桶创建了一些，但还没到达负载因子，再把这些元素删了然后又插入一些元素，溢出桶又创建了一些，反复进行后，最后造成负载桶都很空旷，溢出桶中有元素。</p><p>这种情况下，原大小扩容，将老 bucket 中的元素移动到新 bucket。这样，原来在 overflow bucket 中的 key 可以移动到 负载的bucket 中来。</p><p>第二种情况，插入的元素的哈希取模都一样，也就是说，所有的扩容桶都是同一个桶扩的容，这样哈希表退化成了链表，并且该原地扩容无法解决该问题。但造成该问题的原因不在扩容或者负载上，是哈希函数不好。</p><p>扩容完后不会搬迁，真正的搬迁工作，在插入或修改、删除 key 的时候，都会尝试进行搬迁 buckets 的工作。主要是申请到了新的 buckets 空间，然后把相关的标志位都进行了处理：例如标志 nevacuate 被置为 0， 表示当前搬迁进度为 0。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Map实现&quot;&gt;&lt;a href=&quot;#Map实现&quot; class=&quot;headerlink&quot; title=&quot;Map实现&quot;&gt;&lt;/a&gt;Map实现&lt;/h1&gt;&lt;h2 id=&quot;存储&quot;&gt;&lt;a href=&quot;#存储&quot; class=&quot;headerlink&quot; title=&quot;存储&quot;&gt;&lt;/a&gt;存
      
    
    </summary>
    
      <category term="技术" scheme="http://yoursite.com/blog/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="映射" scheme="http://yoursite.com/blog/tags/%E6%98%A0%E5%B0%84/"/>
    
      <category term="go" scheme="http://yoursite.com/blog/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>go实现策略模式</title>
    <link href="http://yoursite.com/blog/2019/07/17/7-17%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/blog/2019/07/17/7-17技术笔记/</id>
    <published>2019-07-17T09:02:28.000Z</published>
    <updated>2019-07-17T09:21:46.898Z</updated>
    
    <content type="html"><![CDATA[<h1 id="传统策略模式"><a href="#传统策略模式" class="headerlink" title="传统策略模式"></a>传统策略模式</h1><p>传统(Java)策略模式依赖于继承，简单来说，各策略里面的实现封装一次，共同继承一个基类或者实现一个接口，然后一个策略工厂持有基类/接口对象，根据输入进行策略选择，得到对应的策略。业务方在使用时，应该首先用策略工厂获得需要的策略，然后调用策略的方法。</p><p>然而，第一，依然没有避免switch，只不过转移到了策略工厂里；第二，策略和策略工厂耦合。</p><h1 id="GO实现"><a href="#GO实现" class="headerlink" title="GO实现"></a>GO实现</h1><p>GO没有继承，但有方法变量，不如把策略先存到一个Map里，即   [策略名]实现方法的映射，这样直接可以从map中取出方法进行调用</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">var</span> Strategy <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="function"><span class="keyword">func</span><span class="params">(v ...<span class="keyword">interface</span>&#123;&#125;)</span></span></span><br><span class="line"><span class="function"><span class="title">func</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Strategy := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="function"><span class="keyword">func</span><span class="params">(v ...<span class="keyword">interface</span>&#123;&#125;)</span>)</span></span><br><span class="line"><span class="function"><span class="title">Strategy</span>["<span class="title">update</span>"] = <span class="title">func</span><span class="params">(v ...<span class="keyword">interface</span>&#123;&#125;)</span></span>&#123;</span><br><span class="line">fmt.Println(<span class="string">"update table set ? = ?"</span>)</span><br><span class="line">&#125;</span><br><span class="line">Strategy[<span class="string">"insert"</span>] = <span class="function"><span class="keyword">func</span><span class="params">(v ...<span class="keyword">interface</span>&#123;&#125;)</span></span>&#123;</span><br><span class="line">fmt.Println(<span class="string">"insert into table values(?,?,?,?)"</span>)</span><br><span class="line">&#125;</span><br><span class="line">Strategy[<span class="string">"delete"</span>] = <span class="function"><span class="keyword">func</span><span class="params">(v ...<span class="keyword">interface</span>&#123;&#125;)</span></span>&#123;</span><br><span class="line">fmt.Println(<span class="string">"delete from table where ?=?"</span>)</span><br><span class="line">&#125;</span><br><span class="line">Strategy[<span class="string">"select"</span>] = <span class="function"><span class="keyword">func</span><span class="params">(v ...<span class="keyword">interface</span>&#123;&#125;)</span></span>&#123;</span><br><span class="line">fmt.Println(<span class="string">"select ? from table where ?=?"</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">Strategy[<span class="string">"insert"</span>]()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;传统策略模式&quot;&gt;&lt;a href=&quot;#传统策略模式&quot; class=&quot;headerlink&quot; title=&quot;传统策略模式&quot;&gt;&lt;/a&gt;传统策略模式&lt;/h1&gt;&lt;p&gt;传统(Java)策略模式依赖于继承，简单来说，各策略里面的实现封装一次，共同继承一个基类或者实现一个接口，然
      
    
    </summary>
    
      <category term="技术" scheme="http://yoursite.com/blog/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="设计模式" scheme="http://yoursite.com/blog/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="go" scheme="http://yoursite.com/blog/tags/go/"/>
    
  </entry>
  
</feed>
